#pragma once

#include <stdint.h>
#include <array>
#include "primitives.h"

// Atan lookup table with 512 entries
// Covers the range [0,1] with values in Q23.40 format
// Generated with mpmath library at 100 digits precision

namespace math::fp::detail {
// Table maps x in [0,1] to atan(x)
// Values stored in Q23.40 fixed-point format
inline constexpr std::array<int64_t, 512> kAtanLut = {
    0x0000000000000000LL,  // atan(0.00000000000) = 0.00000000000
    0x0000000080401555LL,  // atan(0.00195694716) = 0.00195694466
    0x00000001007FEA4ALL,  // atan(0.00391389432) = 0.00391387434
    0x0000000180BF3E7FLL,  // atan(0.00587084149) = 0.00587077404
    0x0000000200FDD197LL,  // atan(0.00782778865) = 0.00782762877
    0x00000002813B6336LL,  // atan(0.00978473581) = 0.00978442356
    0x000000030177B303LL,  // atan(0.01174168297) = 0.01174114342
    0x0000000381B280AALL,  // atan(0.01369863014) = 0.01369777337
    0x0000000401EB8BD9LL,  // atan(0.01565557730) = 0.01565429844
    0x0000000482229447LL,  // atan(0.01761252446) = 0.01761070366
    0x00000005025759ADLL,  // atan(0.01956947162) = 0.01956697406
    0x0000000582899BCFLL,  // atan(0.02152641879) = 0.02152309469
    0x0000000602B91A75LL,  // atan(0.02348336595) = 0.02347905060
    0x0000000682E59572LL,  // atan(0.02544031311) = 0.02543482684
    0x00000007030ECC9FLL,  // atan(0.02739726027) = 0.02739040847
    0x0000000783347FE2LL,  // atan(0.02935420744) = 0.02934578058
    0x0000000803566F2ALL,  // atan(0.03131115460) = 0.03130092825
    0x0000000883745A71LL,  // atan(0.03326810176) = 0.03325583656
    0x00000009038E01BELL,  // atan(0.03522504892) = 0.03521049063
    0x0000000983A32524LL,  // atan(0.03718199609) = 0.03716487557
    0x0000000A03B384C4LL,  // atan(0.03913894325) = 0.03911897651
    0x0000000A83BEE0CDLL,  // atan(0.04109589041) = 0.04107277859
    0x0000000B03C4F97DLL,  // atan(0.04305283757) = 0.04302626697
    0x0000000B83C58F24LL,  // atan(0.04500978474) = 0.04497942681
    0x0000000C03C0621ELL,  // atan(0.04696673190) = 0.04693224330
    0x0000000C83B532DBLL,  // atan(0.04892367906) = 0.04888470165
    0x0000000D03A3C1DFLL,  // atan(0.05088062622) = 0.05083678706
    0x0000000D838BCFBCLL,  // atan(0.05283757339) = 0.05278848478
    0x0000000E036D1D1ALL,  // atan(0.05479452055) = 0.05473978005
    0x0000000E83476AB7LL,  // atan(0.05675146771) = 0.05669065814
    0x0000000F031A7962LL,  // atan(0.05870841487) = 0.05864110435
    0x0000000F82E60A02LL,  // atan(0.06066536204) = 0.06059110398
    0x0000001002A9DD94LL,  // atan(0.06262230920) = 0.06254064235
    0x000000108265B52DLL,  // atan(0.06457925636) = 0.06448970483
    0x00000011021951F7LL,  // atan(0.06653620352) = 0.06643827678
    0x0000001181C47536LL,  // atan(0.06849315068) = 0.06838634359
    0x000000120166E049LL,  // atan(0.07045009785) = 0.07033389068
    0x00000012810054A7LL,  // atan(0.07240704501) = 0.07228090350
    0x00000013009093E0LL,  // atan(0.07436399217) = 0.07422736750
    0x0000001380175FA3LL,  // atan(0.07632093933) = 0.07617326817
    0x00000013FF9479B9LL,  // atan(0.07827788650) = 0.07811859104
    0x000000147F07A406LL,  // atan(0.08023483366) = 0.08006332163
    0x00000014FE70A090LL,  // atan(0.08219178082) = 0.08200744553
    0x000000157DCF3176LL,  // atan(0.08414872798) = 0.08395094831
    0x00000015FD2318F9LL,  // atan(0.08610567515) = 0.08589381561
    0x000000167C6C1978LL,  // atan(0.08806262231) = 0.08783603308
    0x00000016FBA9F573LL,  // atan(0.09001956947) = 0.08977758639
    0x000000177ADC6F8BLL,  // atan(0.09197651663) = 0.09171846126
    0x00000017FA034A80LL,  // atan(0.09393346380) = 0.09365864343
    0x00000018791E4938LL,  // atan(0.09589041096) = 0.09559811866
    0x00000018F82D2EB8LL,  // atan(0.09784735812) = 0.09753687277
    0x00000019772FBE2BLL,  // atan(0.09980430528) = 0.09947489159
    0x00000019F625BAE0LL,  // atan(0.10176125245) = 0.10141216099
    0x0000001A750EE849LL,  // atan(0.10371819961) = 0.10334866687
    0x0000001AF3EB09FELL,  // atan(0.10567514677) = 0.10528439516
    0x0000001B72B9E3BFLL,  // atan(0.10763209393) = 0.10721933184
    0x0000001BF17B3970LL,  // atan(0.10958904110) = 0.10915346291
    0x0000001C702ECF1ELL,  // atan(0.11154598826) = 0.11108677441
    0x0000001CEED468FDLL,  // atan(0.11350293542) = 0.11301925243
    0x0000001D6D6BCB6ALL,  // atan(0.11545988258) = 0.11495088307
    0x0000001DEBF4BAECLL,  // atan(0.11741682975) = 0.11688165248
    0x0000001E6A6EFC33LL,  // atan(0.11937377691) = 0.11881154687
    0x0000001EE8DA5418LL,  // atan(0.12133072407) = 0.12074055246
    0x0000001F673687A2LL,  // atan(0.12328767123) = 0.12266865550
    0x0000001FE5835C02LL,  // atan(0.12524461840) = 0.12459584233
    0x0000002063C09694LL,  // atan(0.12720156556) = 0.12652209927
    0x00000020E1EDFCE4LL,  // atan(0.12915851272) = 0.12844741272
    0x00000021600B54A8LL,  // atan(0.13111545988) = 0.13037176911
    0x00000021DE1863C7LL,  // atan(0.13307240705) = 0.13229515491
    0x000000225C14F054LL,  // atan(0.13502935421) = 0.13421755664
    0x00000022DA00C093LL,  // atan(0.13698630137) = 0.13613896085
    0x0000002357DB9AF7LL,  // atan(0.13894324853) = 0.13805935415
    0x00000023D5A54623LL,  // atan(0.14090019569) = 0.13997872317
    0x00000024535D88ECLL,  // atan(0.14285714286) = 0.14189705460
    0x00000024D1042A57LL,  // atan(0.14481409002) = 0.14381433519
    0x000000254E98F19CLL,  // atan(0.14677103718) = 0.14573055171
    0x00000025CC1BA624LL,  // atan(0.14872798434) = 0.14764569098
    0x00000026498C0F8ELL,  // atan(0.15068493151) = 0.14955973987
    0x00000026C6E9F5A9LL,  // atan(0.15264187867) = 0.15147268531
    0x000000274435207ALL,  // atan(0.15459882583) = 0.15338451426
    0x00000027C16D583CLL,  // atan(0.15655577299) = 0.15529521374
    0x000000283E92655CLL,  // atan(0.15851272016) = 0.15720477080
    0x00000028BBA4107ELL,  // atan(0.16046966732) = 0.15911317256
    0x0000002938A2227DLL,  // atan(0.16242661448) = 0.16102040617
    0x00000029B58C646ALL,  // atan(0.16438356164) = 0.16292645885
    0x0000002A32629F8DLL,  // atan(0.16634050881) = 0.16483131786
    0x0000002AAF249D65LL,  // atan(0.16829745597) = 0.16673497050
    0x0000002B2BD227ACLL,  // atan(0.17025440313) = 0.16863740414
    0x0000002BA86B0850LL,  // atan(0.17221135029) = 0.17053860620
    0x0000002C24EF097DLL,  // atan(0.17416829746) = 0.17243856413
    0x0000002CA15DF594LL,  // atan(0.17612524462) = 0.17433726545
    0x0000002D1DB79733LL,  // atan(0.17808219178) = 0.17623469774
    0x0000002D99FBB931LL,  // atan(0.18003913894) = 0.17813084861
    0x0000002E162A26A1LL,  // atan(0.18199608611) = 0.18002570575
    0x0000002E9242AAD1LL,  // atan(0.18395303327) = 0.18191925688
    0x0000002F0E45114ALL,  // atan(0.18590998043) = 0.18381148979
    0x0000002F8A3125D3LL,  // atan(0.18786692759) = 0.18570239232
    0x000000300606B46CLL,  // atan(0.18982387476) = 0.18759195237
    0x0000003081C58957LL,  // atan(0.19178082192) = 0.18948015788
    0x00000030FD6D710FLL,  // atan(0.19373776908) = 0.19136699686
    0x0000003178FE3850LL,  // atan(0.19569471624) = 0.19325245738
    0x00000031F477AC12LL,  // atan(0.19765166341) = 0.19513652755
    0x000000326FD9998ELL,  // atan(0.19960861057) = 0.19701919555
    0x00000032EB23CE3BLL,  // atan(0.20156555773) = 0.19890044961
    0x00000033665617CDLL,  // atan(0.20352250489) = 0.20078027803
    0x00000033E170443DLL,  // atan(0.20547945205) = 0.20265866915
    0x000000345C7221BFLL,  // atan(0.20743639922) = 0.20453561138
    0x00000034D75B7ECALL,  // atan(0.20939334638) = 0.20641109319
    0x00000035522C2A17LL,  // atan(0.21135029354) = 0.20828510311
    0x00000035CCE3F29FLL,  // atan(0.21330724070) = 0.21015762971
    0x000000364782A79BLL,  // atan(0.21526418787) = 0.21202866165
    0x00000036C2081888LL,  // atan(0.21722113503) = 0.21389818763
    0x000000373C741526LL,  // atan(0.21917808219) = 0.21576619641
    0x00000037B6C66D75LL,  // atan(0.22113502935) = 0.21763267681
    0x0000003830FEF1BBLL,  // atan(0.22309197652) = 0.21949761774
    0x00000038AB1D727ELL,  // atan(0.22504892368) = 0.22136100812
    0x000000392521C089LL,  // atan(0.22700587084) = 0.22322283698
    0x000000399F0BACEDLL,  // atan(0.22896281800) = 0.22508309337
    0x0000003A18DB08FBLL,  // atan(0.23091976517) = 0.22694176645
    0x0000003A928FA64CLL,  // atan(0.23287671233) = 0.22879884539
    0x0000003B0C2956BCLL,  // atan(0.23483365949) = 0.23065431945
    0x0000003B85A7EC6DLL,  // atan(0.23679060665) = 0.23250817797
    0x0000003BFF0B39C4LL,  // atan(0.23874755382) = 0.23436041031
    0x0000003C7853116ELL,  // atan(0.24070450098) = 0.23621100593
    0x0000003CF17F465DLL,  // atan(0.24266144814) = 0.23805995434
    0x0000003D6A8FABC9LL,  // atan(0.24461839530) = 0.23990724510
    0x0000003DE3841530LL,  // atan(0.24657534247) = 0.24175286786
    0x0000003E5C5C5658LL,  // atan(0.24853228963) = 0.24359681233
    0x0000003ED518434CLL,  // atan(0.25048923679) = 0.24543906825
    0x0000003F4DB7B05ELL,  // atan(0.25244618395) = 0.24727962547
    0x0000003FC63A7229LL,  // atan(0.25440313112) = 0.24911847388
    0x000000403EA05D8DLL,  // atan(0.25636007828) = 0.25095560345
    0x00000040B6E947B4LL,  // atan(0.25831702544) = 0.25279100419
    0x000000412F15060FLL,  // atan(0.26027397260) = 0.25462466619
    0x00000041A7236E56LL,  // atan(0.26223091977) = 0.25645657963
    0x000000421F14568BLL,  // atan(0.26418786693) = 0.25828673470
    0x0000004296E794F7LL,  // atan(0.26614481409) = 0.26011512172
    0x000000430E9D002DLL,  // atan(0.26810176125) = 0.26194173102
    0x0000004386346F06LL,  // atan(0.27005870841) = 0.26376655303
    0x00000043FDADB8A9LL,  // atan(0.27201565558) = 0.26558957823
    0x000000447508B480LL,  // atan(0.27397260274) = 0.26741079718
    0x00000044EC453A43LL,  // atan(0.27592954990) = 0.26923020050
    0x00000045636321F2LL,  // atan(0.27788649706) = 0.27104777888
    0x00000045DA6243D5LL,  // atan(0.27984344423) = 0.27286352306
    0x0000004651427880LL,  // atan(0.28180039139) = 0.27467742388
    0x00000046C80398CFLL,  // atan(0.28375733855) = 0.27648947221
    0x000000473EA57DEALL,  // atan(0.28571428571) = 0.27829965901
    0x00000047B5280141LL,  // atan(0.28767123288) = 0.28010797530
    0x000000482B8AFC8ELL,  // atan(0.28962818004) = 0.28191441217
    0x00000048A1CE49D9LL,  // atan(0.29158512720) = 0.28371896079
    0x0000004917F1C370LL,  // atan(0.29354207436) = 0.28552161237
    0x000000498DF543EDLL,  // atan(0.29549902153) = 0.28732235821
    0x0000004A03D8A636LL,  // atan(0.29745596869) = 0.28912118967
    0x0000004A799BC57ALL,  // atan(0.29941291585) = 0.29091809818
    0x0000004AEF3E7D32LL,  // atan(0.30136986301) = 0.29271307522
    0x0000004B64C0A925LL,  // atan(0.30332681018) = 0.29450611238
    0x0000004BDA222563LL,  // atan(0.30528375734) = 0.29629720128
    0x0000004C4F62CE45LL,  // atan(0.30724070450) = 0.29808633362
    0x0000004CC4828073LL,  // atan(0.30919765166) = 0.29987350117
    0x0000004D398118DCLL,  // atan(0.31115459883) = 0.30165869576
    0x0000004DAE5E74BFLL,  // atan(0.31311154599) = 0.30344190932
    0x0000004E231A71A0LL,  // atan(0.31506849315) = 0.30522313379
    0x0000004E97B4ED54LL,  // atan(0.31702544031) = 0.30700236124
    0x0000004F0C2DC5F7LL,  // atan(0.31898238748) = 0.30877958377
    0x0000004F8084D9F3LL,  // atan(0.32093933464) = 0.31055479356
    0x0000004FF4BA07FCLL,  // atan(0.32289628180) = 0.31232798285
    0x0000005068CD2F11LL,  // atan(0.32485322896) = 0.31409914397
    0x00000050DCBE2E7ELL,  // atan(0.32681017613) = 0.31586826930
    0x00000051508CE5D7LL,  // atan(0.32876712329) = 0.31763535129
    0x00000051C43934FFLL,  // atan(0.33072407045) = 0.31940038246
    0x0000005237C2FC21LL,  // atan(0.33268101761) = 0.32116335540
    0x00000052AB2A1BB7LL,  // atan(0.33463796477) = 0.32292426278
    0x000000531E6E7482LL,  // atan(0.33659491194) = 0.32468309731
    0x00000053918FE791LL,  // atan(0.33855185910) = 0.32643985179
    0x00000054048E563ELL,  // atan(0.34050880626) = 0.32819451910
    0x000000547769A22ELL,  // atan(0.34246575342) = 0.32994709215
    0x00000054EA21AD4FLL,  // atan(0.34442270059) = 0.33169756395
    0x000000555CB659DDLL,  // atan(0.34637964775) = 0.33344592756
    0x00000055CF278A5ELL,  // atan(0.34833659491) = 0.33519217613
    0x00000056417521A2LL,  // atan(0.35029354207) = 0.33693630286
    0x00000056B39F02C6LL,  // atan(0.35225048924) = 0.33867830103
    0x0000005725A5112FLL,  // atan(0.35420743640) = 0.34041816396
    0x0000005797873090LL,  // atan(0.35616438356) = 0.34215588508
    0x00000058094544E5LL,  // atan(0.35812133072) = 0.34389145786
    0x000000587ADF3274LL,  // atan(0.36007827789) = 0.34562487585
    0x00000058EC54DDCELL,  // atan(0.36203522505) = 0.34735613265
    0x000000595DA62BD0LL,  // atan(0.36399217221) = 0.34908522196
    0x00000059CED301A0LL,  // atan(0.36594911937) = 0.35081213751
    0x0000005A3FDB44ADLL,  // atan(0.36790606654) = 0.35253687312
    0x0000005AB0BEDAB4LL,  // atan(0.36986301370) = 0.35425942268
    0x0000005B217DA9B8LL,  // atan(0.37181996086) = 0.35597978014
    0x0000005B92179809LL,  // atan(0.37377690802) = 0.35769793951
    0x0000005C028C8C3ELL,  // atan(0.37573385519) = 0.35941389488
    0x0000005C72DC6D3BLL,  // atan(0.37769080235) = 0.36112764041
    0x0000005CE307222CLL,  // atan(0.37964774951) = 0.36283917031
    0x0000005D530C9285LL,  // atan(0.38160469667) = 0.36454847886
    0x0000005DC2ECA607LL,  // atan(0.38356164384) = 0.36625556043
    0x0000005E32A744B8LL,  // atan(0.38551859100) = 0.36796040943
    0x0000005EA23C56ECLL,  // atan(0.38747553816) = 0.36966302034
    0x0000005F11ABC53ALL,  // atan(0.38943248532) = 0.37136338773
    0x0000005F80F57888LL,  // atan(0.39138943249) = 0.37306150620
    0x0000005FF0195A00LL,  // atan(0.39334637965) = 0.37475737045
    0x000000605F175318LL,  // atan(0.39530332681) = 0.37645097521
    0x00000060CDEF4D8BLL,  // atan(0.39726027397) = 0.37814231532
    0x000000613CA1335ELL,  // atan(0.39921722114) = 0.37983138565
    0x00000061AB2CEEE0LL,  // atan(0.40117416830) = 0.38151818115
    0x0000006219926AA3LL,  // atan(0.40313111546) = 0.38320269683
    0x0000006287D19186LL,  // atan(0.40508806262) = 0.38488492778
    0x00000062F5EA4EABLL,  // atan(0.40704500978) = 0.38656486912
    0x0000006363DC8D80LL,  // atan(0.40900195695) = 0.38824251608
    0x00000063D1A839B5LL,  // atan(0.41095890411) = 0.38991786393
    0x000000643F4D3F45LL,  // atan(0.41291585127) = 0.39159090800
    0x00000064ACCB8A71LL,  // atan(0.41487279843) = 0.39326164370
    0x000000651A2307BFLL,  // atan(0.41682974560) = 0.39493006648
    0x000000658753A3FDLL,  // atan(0.41878669276) = 0.39659617189
    0x00000065F45D4C3FLL,  // atan(0.42074363992) = 0.39825995552
    0x00000066613FEDDELL,  // atan(0.42270058708) = 0.39992141301
    0x00000066CDFB767ALL,  // atan(0.42465753425) = 0.40158054011
    0x000000673A8FD3F8LL,  // atan(0.42661448141) = 0.40323733258
    0x00000067A6FCF483LL,  // atan(0.42857142857) = 0.40489178629
    0x000000681342C68ALL,  // atan(0.43052837573) = 0.40654389713
    0x000000687F6138C3LL,  // atan(0.43248532290) = 0.40819366108
    0x00000068EB583A27LL,  // atan(0.43444227006) = 0.40984107418
    0x000000695727B9F3LL,  // atan(0.43639921722) = 0.41148613253
    0x00000069C2CFA7ABLL,  // atan(0.43835616438) = 0.41312883228
    0x0000006A2E4FF314LL,  // atan(0.44031311155) = 0.41476916966
    0x0000006A99A88C3ALL,  // atan(0.44227005871) = 0.41640714096
    0x0000006B04D96369LL,  // atan(0.44422700587) = 0.41804274251
    0x0000006B6FE26933LL,  // atan(0.44618395303) = 0.41967597073
    0x0000006BDAC38E6DLL,  // atan(0.44814090020) = 0.42130682208
    0x0000006C457CC42DLL,  // atan(0.45009784736) = 0.42293529310
    0x0000006CB00DFBCFLL,  // atan(0.45205479452) = 0.42456138036
    0x0000006D1A7726EDLL,  // atan(0.45401174168) = 0.42618508053
    0x0000006D84B83768LL,  // atan(0.45596868885) = 0.42780639031
    0x0000006DEED11F5ELL,  // atan(0.45792563601) = 0.42942530647
    0x0000006E58C1D133LL,  // atan(0.45988258317) = 0.43104182584
    0x0000006EC28A3F8ALL,  // atan(0.46183953033) = 0.43265594531
    0x0000006F2C2A5D48LL,  // atan(0.46379647750) = 0.43426766183
    0x0000006F95A21D91LL,  // atan(0.46575342466) = 0.43587697241
    0x0000006FFEF173CDLL,  // atan(0.46771037182) = 0.43748387410
    0x00000070681853A2LL,  // atan(0.46966731898) = 0.43908836405
    0x00000070D116B0F6LL,  // atan(0.47162426614) = 0.44069043942
    0x0000007139EC7FF1LL,  // atan(0.47358121331) = 0.44229009746
    0x00000071A299B4F7LL,  // atan(0.47553816047) = 0.44388733547
    0x000000720B1E44AFLL,  // atan(0.47749510763) = 0.44548215081
    0x00000072737A23FDLL,  // atan(0.47945205479) = 0.44707454089
    0x00000072DBAD4803LL,  // atan(0.48140900196) = 0.44866450318
    0x0000007343B7A624LL,  // atan(0.48336594912) = 0.45025203520
    0x00000073AB9933FELL,  // atan(0.48532289628) = 0.45183713455
    0x000000741351E771LL,  // atan(0.48727984344) = 0.45341979886
    0x000000747AE1B696LL,  // atan(0.48923679061) = 0.45500002582
    0x00000074E24897C6LL,  // atan(0.49119373777) = 0.45657781320
    0x0000007549868198LL,  // atan(0.49315068493) = 0.45815315880
    0x00000075B09B6ADDLL,  // atan(0.49510763209) = 0.45972606048
    0x0000007617874AA4LL,  // atan(0.49706457926) = 0.46129651615
    0x000000767E4A1838LL,  // atan(0.49902152642) = 0.46286452380
    0x00000076E4E3CB20LL,  // atan(0.50097847358) = 0.46443008145
    0x000000774B545B1ELL,  // atan(0.50293542074) = 0.46599318719
    0x00000077B19BC031LL,  // atan(0.50489236791) = 0.46755383913
    0x0000007817B9F291LL,  // atan(0.50684931507) = 0.46911203549
    0x000000787DAEEAB2LL,  // atan(0.50880626223) = 0.47066777449
    0x00000078E37AA141LL,  // atan(0.51076320939) = 0.47222105443
    0x00000079491D0F26LL,  // atan(0.51272015656) = 0.47377187366
    0x00000079AE962D83LL,  // atan(0.51467710372) = 0.47532023059
    0x0000007A13E5F5B4LL,  // atan(0.51663405088) = 0.47686612366
    0x0000007A790C614DLL,  // atan(0.51859099804) = 0.47840955139
    0x0000007ADE096A1CLL,  // atan(0.52054794521) = 0.47995051232
    0x0000007B42DD0A26LL,  // atan(0.52250489237) = 0.48148900507
    0x0000007BA7873BA9LL,  // atan(0.52446183953) = 0.48302502829
    0x0000007C0C07F91CLL,  // atan(0.52641878669) = 0.48455858070
    0x0000007C705F3D2DLL,  // atan(0.52837573386) = 0.48608966106
    0x0000007CD48D02C2LL,  // atan(0.53033268102) = 0.48761826818
    0x0000007D389144F5LL,  // atan(0.53228962818) = 0.48914440092
    0x0000007D9C6BFF1CLL,  // atan(0.53424657534) = 0.49066805819
    0x0000007E001D2CBELL,  // atan(0.53620352250) = 0.49218923895
    0x0000007E63A4C99CLL,  // atan(0.53816046967) = 0.49370794222
    0x0000007EC702D1AALL,  // atan(0.54011741683) = 0.49522416705
    0x0000007F2A374115LL,  // atan(0.54207436399) = 0.49673791255
    0x0000007F8D42143CLL,  // atan(0.54403131115) = 0.49824917788
    0x0000007FF02347B4LL,  // atan(0.54598825832) = 0.49975796223
    0x0000008052DAD846LL,  // atan(0.54794520548) = 0.50126426487
    0x00000080B568C2F1LL,  // atan(0.54990215264) = 0.50276808509
    0x0000008117CD04E6LL,  // atan(0.55185909980) = 0.50426942224
    0x000000817A079B89LL,  // atan(0.55381604697) = 0.50576827571
    0x00000081DC188475LL,  // atan(0.55577299413) = 0.50726464495
    0x000000823DFFBD74LL,  // atan(0.55772994129) = 0.50875852943
    0x000000829FBD4484LL,  // atan(0.55968688845) = 0.51024992869
    0x00000083015117D6LL,  // atan(0.56164383562) = 0.51173884232
    0x0000008362BB35CCLL,  // atan(0.56360078278) = 0.51322526992
    0x00000083C3FB9CFBLL,  // atan(0.56555772994) = 0.51470921118
    0x0000008425124C28LL,  // atan(0.56751467710) = 0.51619066581
    0x0000008485FF424ALL,  // atan(0.56947162427) = 0.51766963356
    0x00000084E6C27E88LL,  // atan(0.57142857143) = 0.51914611425
    0x00000085475C003ALL,  // atan(0.57338551859) = 0.52062010770
    0x00000085A7CBC6E8LL,  // atan(0.57534246575) = 0.52209161383
    0x000000860811D249LL,  // atan(0.57729941292) = 0.52356063255
    0x00000086682E2245LL,  // atan(0.57925636008) = 0.52502716386
    0x00000086C820B6F2LL,  // atan(0.58121330724) = 0.52649120776
    0x0000008727E99095LL,  // atan(0.58317025440) = 0.52795276432
    0x000000878788AFA1LL,  // atan(0.58512720157) = 0.52941183365
    0x00000087E6FE14B8LL,  // atan(0.58708414873) = 0.53086841589
    0x000000884649C0ABLL,  // atan(0.58904109589) = 0.53232251123
    0x00000088A56BB476LL,  // atan(0.59099804305) = 0.53377411991
    0x000000890463F143LL,  // atan(0.59295499022) = 0.53522324219
    0x000000896332786ALL,  // atan(0.59491193738) = 0.53666987839
    0x00000089C1D74B6FLL,  // atan(0.59686888454) = 0.53811402885
    0x0000008A20526C01LL,  // atan(0.59882583170) = 0.53955569398
    0x0000008A7EA3DBFELL,  // atan(0.60078277886) = 0.54099487420
    0x0000008ADCCB9D6CLL,  // atan(0.60273972603) = 0.54243156999
    0x0000008B3AC9B27FLL,  // atan(0.60469667319) = 0.54386578186
    0x0000008B989E1D96LL,  // atan(0.60665362035) = 0.54529751036
    0x0000008BF648E137LL,  // atan(0.60861056751) = 0.54672675608
    0x0000008C53CA0018LL,  // atan(0.61056751468) = 0.54815351965
    0x0000008CB1217D14LL,  // atan(0.61252446184) = 0.54957780174
    0x0000008D0E4F5B33LL,  // atan(0.61448140900) = 0.55099960305
    0x0000008D6B539DA5LL,  // atan(0.61643835616) = 0.55241892432
    0x0000008DC82E47C4LL,  // atan(0.61839530333) = 0.55383576634
    0x0000008E24DF5D11LL,  // atan(0.62035225049) = 0.55525012991
    0x0000008E8166E137LL,  // atan(0.62230919765) = 0.55666201590
    0x0000008EDDC4D80ALL,  // atan(0.62426614481) = 0.55807142519
    0x0000008F39F94583LL,  // atan(0.62622309198) = 0.55947835872
    0x0000008F96042DC5LL,  // atan(0.62818003914) = 0.56088281743
    0x0000008FF1E59519LL,  // atan(0.63013698630) = 0.56228480234
    0x000000904D9D7FF0LL,  // atan(0.63209393346) = 0.56368431447
    0x00000090A92BF2E0LL,  // atan(0.63405088063) = 0.56508135490
    0x000000910490F2A7LL,  // atan(0.63600782779) = 0.56647592472
    0x000000915FCC8428LL,  // atan(0.63796477495) = 0.56786802508
    0x00000091BADEAC6BLL,  // atan(0.63992172211) = 0.56925765714
    0x0000009215C770A0LL,  // atan(0.64187866928) = 0.57064482212
    0x000000927086D618LL,  // atan(0.64383561644) = 0.57202952125
    0x00000092CB1CE24DLL,  // atan(0.64579256360) = 0.57341175580
    0x0000009325899ADALL,  // atan(0.64774951076) = 0.57479152709
    0x000000937FCD0580LL,  // atan(0.64970645793) = 0.57616883644
    0x00000093D9E72824LL,  // atan(0.65166340509) = 0.57754368525
    0x0000009433D808CDLL,  // atan(0.65362035225) = 0.57891607490
    0x000000948D9FADA7LL,  // atan(0.65557729941) = 0.58028600683
    0x00000094E73E1D00LL,  // atan(0.65753424658) = 0.58165348251
    0x0000009540B35D47LL,  // atan(0.65949119374) = 0.58301850345
    0x0000009599FF7511LL,  // atan(0.66144814090) = 0.58438107117
    0x00000095F3226B13LL,  // atan(0.66340508806) = 0.58574118723
    0x000000964C1C4622LL,  // atan(0.66536203523) = 0.58709885323
    0x00000096A4ED0D38LL,  // atan(0.66731898239) = 0.58845407079
    0x00000096FD94C76ELL,  // atan(0.66927592955) = 0.58980684155
    0x0000009756137BFDLL,  // atan(0.67123287671) = 0.59115716722
    0x00000097AE693240LL,  // atan(0.67318982387) = 0.59250504948
    0x000000980695F1B3LL,  // atan(0.67514677104) = 0.59385049010
    0x000000985E99C1EFLL,  // atan(0.67710371820) = 0.59519349084
    0x00000098B674AAB0LL,  // atan(0.67906066536) = 0.59653405349
    0x000000990E26B3D0LL,  // atan(0.68101761252) = 0.59787217989
    0x0000009965AFE547LL,  // atan(0.68297455969) = 0.59920787189
    0x00000099BD10472CLL,  // atan(0.68493150685) = 0.60054113138
    0x0000009A1447E1B8LL,  // atan(0.68688845401) = 0.60187196027
    0x0000009A6B56BD3CLL,  // atan(0.68884540117) = 0.60320036049
    0x0000009AC23CE22DLL,  // atan(0.69080234834) = 0.60452633402
    0x0000009B18FA591ALL,  // atan(0.69275929550) = 0.60584988284
    0x0000009B6F8F2AB0LL,  // atan(0.69471624266) = 0.60717100899
    0x0000009BC5FB5FBALL,  // atan(0.69667318982) = 0.60848971450
    0x0000009C1C3F011ELL,  // atan(0.69863013699) = 0.60980600145
    0x0000009C725A17E2LL,  // atan(0.70058708415) = 0.61111987193
    0x0000009CC84CAD23LL,  // atan(0.70254403131) = 0.61243132808
    0x0000009D1E16CA1FLL,  // atan(0.70450097847) = 0.61374037203
    0x0000009D73B8782DLL,  // atan(0.70645792564) = 0.61504700598
    0x0000009DC931C0C0LL,  // atan(0.70841487280) = 0.61635123211
    0x0000009E1E82AD66LL,  // atan(0.71037181996) = 0.61765305265
    0x0000009E73AB47C7LL,  // atan(0.71232876712) = 0.61895246985
    0x0000009EC8AB99A8LL,  // atan(0.71428571429) = 0.62024948598
    0x0000009F1D83ACE5LL,  // atan(0.71624266145) = 0.62154410335
    0x0000009F72338B78LL,  // atan(0.71819960861) = 0.62283632426
    0x0000009FC6BB3F71LL,  // atan(0.72015655577) = 0.62412615107
    0x000000A01B1AD2FBLL,  // atan(0.72211350294) = 0.62541358615
    0x000000A06F52505BLL,  // atan(0.72407045010) = 0.62669863188
    0x000000A0C361C1EELL,  // atan(0.72602739726) = 0.62798129067
    0x000000A11749322ALL,  // atan(0.72798434442) = 0.62926156497
    0x000000A16B08AB9DLL,  // atan(0.72994129159) = 0.63053945722
    0x000000A1BEA038EELL,  // atan(0.73189823875) = 0.63181496992
    0x000000A2120FE4DBLL,  // atan(0.73385518591) = 0.63308810556
    0x000000A26557BA3ALL,  // atan(0.73581213307) = 0.63435886666
    0x000000A2B877C3F9LL,  // atan(0.73776908023) = 0.63562725577
    0x000000A30B700D1DLL,  // atan(0.73972602740) = 0.63689327545
    0x000000A35E40A0C0LL,  // atan(0.74168297456) = 0.63815692830
    0x000000A3B0E98A15LL,  // atan(0.74363992172) = 0.63941821691
    0x000000A4036AD465LL,  // atan(0.74559686888) = 0.64067714391
    0x000000A455C48B0ELL,  // atan(0.74755381605) = 0.64193371196
    0x000000A4A7F6B985LL,  // atan(0.74951076321) = 0.64318792371
    0x000000A4FA016B53LL,  // atan(0.75146771037) = 0.64443978186
    0x000000A54BE4AC18LL,  // atan(0.75342465753) = 0.64568928911
    0x000000A59DA08789LL,  // atan(0.75538160470) = 0.64693644818
    0x000000A5EF35096FLL,  // atan(0.75733855186) = 0.64818126183
    0x000000A640A23DA9LL,  // atan(0.75929549902) = 0.64942373281
    0x000000A691E83027LL,  // atan(0.76125244618) = 0.65066386390
    0x000000A6E306ECF2LL,  // atan(0.76320939335) = 0.65190165791
    0x000000A733FE8024LL,  // atan(0.76516634051) = 0.65313711766
    0x000000A784CEF5EBLL,  // atan(0.76712328767) = 0.65437024597
    0x000000A7D5785A88LL,  // atan(0.76908023483) = 0.65560104571
    0x000000A825FABA50LL,  // atan(0.77103718200) = 0.65682951974
    0x000000A8765621ACLL,  // atan(0.77299412916) = 0.65805567095
    0x000000A8C68A9D15LL,  // atan(0.77495107632) = 0.65927950225
    0x000000A916983918LL,  // atan(0.77690802348) = 0.66050101656
    0x000000A9667F0255LL,  // atan(0.77886497065) = 0.66172021682
    0x000000A9B63F057DLL,  // atan(0.78082191781) = 0.66293710598
    0x000000AA05D84F53LL,  // atan(0.78277886497) = 0.66415168702
    0x000000AA554AECABLL,  // atan(0.78473581213) = 0.66536396292
    0x000000AAA496EA6BLL,  // atan(0.78669275930) = 0.66657393668
    0x000000AAF3BC558BLL,  // atan(0.78864970646) = 0.66778161133
    0x000000AB42BB3B13LL,  // atan(0.79060665362) = 0.66898698990
    0x000000AB9193A81BLL,  // atan(0.79256360078) = 0.67019007544
    0x000000ABE045A9CBLL,  // atan(0.79452054795) = 0.67139087100
    0x000000AC2ED14D5ELL,  // atan(0.79647749511) = 0.67258937968
    0x000000AC7D36A01DLL,  // atan(0.79843444227) = 0.67378560456
    0x000000ACCB75AF61LL,  // atan(0.80039138943) = 0.67497954876
    0x000000AD198E8892LL,  // atan(0.80234833659) = 0.67617121538
    0x000000AD67813928LL,  // atan(0.80430528376) = 0.67736060758
    0x000000ADB54DCEACLL,  // atan(0.80626223092) = 0.67854772850
    0x000000AE02F456B2LL,  // atan(0.80821917808) = 0.67973258130
    0x000000AE5074DEE1LL,  // atan(0.81017612524) = 0.68091516916
    0x000000AE9DCF74EALL,  // atan(0.81213307241) = 0.68209549527
    0x000000AEEB042690LL,  // atan(0.81409001957) = 0.68327356283
    0x000000AF381301A3LL,  // atan(0.81604696673) = 0.68444937506
    0x000000AF84FC1401LL,  // atan(0.81800391389) = 0.68562293518
    0x000000AFD1BF6B94LL,  // atan(0.81996086106) = 0.68679424645
    0x000000B01E5D1656LL,  // atan(0.82191780822) = 0.68796331211
    0x000000B06AD5224ELL,  // atan(0.82387475538) = 0.68913013542
    0x000000B0B7279D8DLL,  // atan(0.82583170254) = 0.69029471966
    0x000000B103549635LL,  // atan(0.82778864971) = 0.69145706813
    0x000000B14F5C1A72LL,  // atan(0.82974559687) = 0.69261718412
    0x000000B19B3E387ELL,  // atan(0.83170254403) = 0.69377507095
    0x000000B1E6FAFE9FLL,  // atan(0.83365949119) = 0.69493073193
    0x000000B232927B26LL,  // atan(0.83561643836) = 0.69608417040
    0x000000B27E04BC71LL,  // atan(0.83757338552) = 0.69723538972
    0x000000B2C951D0E9LL,  // atan(0.83953033268) = 0.69838439322
    0x000000B31479C704LL,  // atan(0.84148727984) = 0.69953118428
    0x000000B35F7CAD42LL,  // atan(0.84344422701) = 0.70067576628
    0x000000B3AA5A922ELL,  // atan(0.84540117417) = 0.70181814259
    0x000000B3F5138460LL,  // atan(0.84735812133) = 0.70295831663
    0x000000B43FA79278LL,  // atan(0.84931506849) = 0.70409629179
    0x000000B48A16CB21LL,  // atan(0.85127201566) = 0.70523207149
    0x000000B4D4613D14LL,  // atan(0.85322896282) = 0.70636565915
    0x000000B51E86F710LL,  // atan(0.85518590998) = 0.70749705822
    0x000000B5688807DFLL,  // atan(0.85714285714) = 0.70862627213
    0x000000B5B2647E58LL,  // atan(0.85909980431) = 0.70975330433
    0x000000B5FC1C6957LL,  // atan(0.86105675147) = 0.71087815830
    0x000000B645AFD7C4LL,  // atan(0.86301369863) = 0.71200083750
    0x000000B68F1ED892LL,  // atan(0.86497064579) = 0.71312134540
    0x000000B6D8697ABALL,  // atan(0.86692759295) = 0.71423968550
    0x000000B7218FCD40LL,  // atan(0.86888454012) = 0.71535586129
    0x000000B76A91DF30LL,  // atan(0.87084148728) = 0.71646987628
    0x000000B7B36FBF9FLL,  // atan(0.87279843444) = 0.71758173397
    0x000000B7FC297DAALL,  // atan(0.87475538160) = 0.71869143789
    0x000000B844BF2878LL,  // atan(0.87671232877) = 0.71979899157
    0x000000B88D30CF37LL,  // atan(0.87866927593) = 0.72090439853
    0x000000B8D57E811CLL,  // atan(0.88062622309) = 0.72200766232
    0x000000B91DA84D66LL,  // atan(0.88258317025) = 0.72310878648
    0x000000B965AE4359LL,  // atan(0.88454011742) = 0.72420777458
    0x000000B9AD907244LL,  // atan(0.88649706458) = 0.72530463018
    0x000000B9F54EE97CLL,  // atan(0.88845401174) = 0.72639935684
    0x000000BA3CE9B85ALL,  // atan(0.89041095890) = 0.72749195815
    0x000000BA8460EE43LL,  // atan(0.89236790607) = 0.72858243768
    0x000000BACBB49AA1LL,  // atan(0.89432485323) = 0.72967079902
    0x000000BB12E4CCE3LL,  // atan(0.89628180039) = 0.73075704577
    0x000000BB59F19481LL,  // atan(0.89823874755) = 0.73184118152
    0x000000BBA0DB00F9LL,  // atan(0.90019569472) = 0.73292320989
    0x000000BBE7A121CELL,  // atan(0.90215264188) = 0.73400313449
    0x000000BC2E44068ALL,  // atan(0.90410958904) = 0.73508095894
    0x000000BC74C3BEBELL,  // atan(0.90606653620) = 0.73615668685
    0x000000BCBB2059FFLL,  // atan(0.90802348337) = 0.73723032186
    0x000000BD0159E7E9LL,  // atan(0.90998043053) = 0.73830186760
    0x000000BD4770781CLL,  // atan(0.91193737769) = 0.73937132771
    0x000000BD8D641A40LL,  // atan(0.91389432485) = 0.74043870584
    0x000000BDD334DE01LL,  // atan(0.91585127202) = 0.74150400562
    0x000000BE18E2D30FLL,  // atan(0.91780821918) = 0.74256723073
    0x000000BE5E6E0921LL,  // atan(0.91976516634) = 0.74362838481
    0x000000BEA3D68FF0LL,  // atan(0.92172211350) = 0.74468747152
    0x000000BEE91C773ELL,  // atan(0.92367906067) = 0.74574449454
    0x000000BF2E3FCECDLL,  // atan(0.92563600783) = 0.74679945754
    0x000000BF7340A667LL,  // atan(0.92759295499) = 0.74785236418
    0x000000BFB81F0DD9LL,  // atan(0.92954990215) = 0.74890321816
    0x000000BFFCDB14F3LL,  // atan(0.93150684932) = 0.74995202314
    0x000000C04174CB8BLL,  // atan(0.93346379648) = 0.75099878282
    0x000000C085EC4179LL,  // atan(0.93542074364) = 0.75204350089
    0x000000C0CA41869CLL,  // atan(0.93737769080) = 0.75308618103
    0x000000C10E74AAD2LL,  // atan(0.93933463796) = 0.75412682696
    0x000000C15285BE01LL,  // atan(0.94129158513) = 0.75516544236
    0x000000C19674D010LL,  // atan(0.94324853229) = 0.75620203094
    0x000000C1DA41F0E9LL,  // atan(0.94520547945) = 0.75723659641
    0x000000C21DED307BLL,  // atan(0.94716242661) = 0.75826914247
    0x000000C261769EB6LL,  // atan(0.94911937378) = 0.75929967284
    0x000000C2A4DE4B8ELL,  // atan(0.95107632094) = 0.76032819123
    0x000000C2E82446FBLL,  // atan(0.95303326810) = 0.76135470136
    0x000000C32B48A0F4LL,  // atan(0.95499021526) = 0.76237920694
    0x000000C36E4B6976LL,  // atan(0.95694716243) = 0.76340171170
    0x000000C3B12CB080LL,  // atan(0.95890410959) = 0.76442221936
    0x000000C3F3EC8612LL,  // atan(0.96086105675) = 0.76544073365
    0x000000C4368AFA2ELL,  // atan(0.96281800391) = 0.76645725830
    0x000000C479081CDALL,  // atan(0.96477495108) = 0.76747179703
    0x000000C4BB63FE1DLL,  // atan(0.96673189824) = 0.76848435358
    0x000000C4FD9EADFFLL,  // atan(0.96868884540) = 0.76949493168
    0x000000C53FB83C8BLL,  // atan(0.97064579256) = 0.77050353506
    0x000000C581B0B9CCLL,  // atan(0.97260273973) = 0.77151016747
    0x000000C5C38835D2LL,  // atan(0.97455968689) = 0.77251483263
    0x000000C6053EC0A9LL,  // atan(0.97651663405) = 0.77351753429
    0x000000C646D46A64LL,  // atan(0.97847358121) = 0.77451827619
    0x000000C688494313LL,  // atan(0.98043052838) = 0.77551706207
    0x000000C6C99D5ACALL,  // atan(0.98238747554) = 0.77651389567
    0x000000C70AD0C19CLL,  // atan(0.98434442270) = 0.77750878074
    0x000000C74BE3879DLL,  // atan(0.98630136986) = 0.77850172101
    0x000000C78CD5BCE2LL,  // atan(0.98825831703) = 0.77949272024
    0x000000C7CDA77183LL,  // atan(0.99021526419) = 0.78048178216
    0x000000C80E58B595LL,  // atan(0.99217221135) = 0.78146891053
    0x000000C84EE99930LL,  // atan(0.99412915851) = 0.78245410910
    0x000000C88F5A2C6BLL,  // atan(0.99608610568) = 0.78343738160
    0x000000C8CFAA7F5ELL,  // atan(0.99804305284) = 0.78441873178
    0x000000C90FDAA221LL   // atan(1.00000000000) = 0.78539816340
};

// Fast lookup atan(x) with linear interpolation between table entries
// Input x is in fixed-point format with specified fraction bits representing a value in [-1,1]
// Output is in fixed-point format with the same fraction bits representing atan(x)
// Precision: ~3.1e-7 when fraction_bits=32
inline constexpr auto LookupAtanFast(int64_t x, int input_fraction_bits) noexcept -> int64_t {
    // Constants
    constexpr int kOutputFractionBits = 40;  // Internal calculation format
    constexpr int64_t kOne = 1LL << kOutputFractionBits;

    // Handle negative input
    bool is_negative = false;
    if (x < 0) {
        x = -x;
        is_negative = true;
    }

    // Convert input to internal format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            x <<= (kOutputFractionBits - input_fraction_bits);
        } else {
            x >>= (input_fraction_bits - kOutputFractionBits);
        }
    }

    // 1. Ensure x is in [0,1] range
    if (x <= 0) {
        return 0;
    }
    bool use_reciprocal = false;
    if (x >= kOne) {
        // For x > 1, use atan(x) = π/2 - atan(1/x)
        use_reciprocal = true;
        // Calculate 1/x in fixed-point
        x = Primitives::Fixed64Div(kOne, x, kOutputFractionBits);
    }

    // 2. Scale x to table index
    constexpr int64_t kScale = static_cast<int64_t>(kAtanLut.size() - 1);
    const int64_t idx_scaled = Primitives::Fixed64Mul(x, kScale << kOutputFractionBits, kOutputFractionBits);
    const int64_t idx = idx_scaled >> kOutputFractionBits;
    const int64_t t = idx_scaled & ((1LL << kOutputFractionBits) - 1);  // Fractional part [0,1)

    // 3. Clamp index to valid range
    if (idx >= static_cast<int64_t>(kAtanLut.size()) - 1) {
        // Return the maximum value (atan(1) = pi/4)
        int64_t result = kAtanLut[kAtanLut.size() - 1];
        if (input_fraction_bits != kOutputFractionBits) {
            if (input_fraction_bits < kOutputFractionBits) {
                result >>= (kOutputFractionBits - input_fraction_bits);
            } else {
                result <<= (input_fraction_bits - kOutputFractionBits);
            }
        }
        return is_negative ? -result : result;
    }

    // 4. Get table values for interpolation
    const int64_t y0 = kAtanLut[idx];
    const int64_t y1 = kAtanLut[idx + 1];

    // 5. Linear interpolation
    int64_t result = y0 + Primitives::Fixed64Mul(y1 - y0, t, kOutputFractionBits);

    // Apply reciprocal formula if needed
    if (use_reciprocal) {
        // π/2 in our fixed-point format
        constexpr int64_t kHalfPi = 0x000001921FB54442LL;  // pi/2 = 1.5707963267948966
        result = kHalfPi - result;
    }

    // 6. Convert result back to input format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            result >>= (kOutputFractionBits - input_fraction_bits);
        } else {
            result <<= (input_fraction_bits - kOutputFractionBits);
        }
    }

    // Apply sign
    return is_negative ? -result : result;
}

// High precision lookup atan(x) with quadratic interpolation between table entries
// Input x is in fixed-point format with specified fraction bits representing a value in [-1,1]
// Output is in fixed-point format with the same fraction bits representing atan(x)
// Precision: ~5.5e-10 when fraction_bits=32
inline constexpr auto LookupAtan(int64_t x, int input_fraction_bits) noexcept -> int64_t {
    // Constants
    constexpr int kOutputFractionBits = 40;  // Internal calculation format
    constexpr int64_t kOne = 1LL << kOutputFractionBits;

    // Handle negative input
    bool is_negative = false;
    if (x < 0) {
        x = -x;
        is_negative = true;
    }

    // Convert input to internal format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            x <<= (kOutputFractionBits - input_fraction_bits);
        } else {
            x >>= (input_fraction_bits - kOutputFractionBits);
        }
    }

    // 1. Ensure x is in [0,1] range
    if (x <= 0) {
        return 0;
    }
    bool use_reciprocal = false;
    if (x >= kOne) {
        // For x > 1, use atan(x) = π/2 - atan(1/x)
        use_reciprocal = true;
        // Calculate 1/x in fixed-point
        x = Primitives::Fixed64Div(kOne, x, kOutputFractionBits);
    }

    // 2. Scale x to table index
    constexpr int64_t kScale = static_cast<int64_t>(kAtanLut.size() - 1);
    const int64_t idx_scaled = Primitives::Fixed64Mul(x, kScale << kOutputFractionBits, kOutputFractionBits);
    const int64_t idx = idx_scaled >> kOutputFractionBits;
    const int64_t t = idx_scaled & ((1LL << kOutputFractionBits) - 1);  // Fractional part [0,1)

    // 3. Clamp index to valid range
    if (idx >= static_cast<int64_t>(kAtanLut.size()) - 1) {
        // Return the maximum value (atan(1) = pi/4)
        int64_t result = kAtanLut[kAtanLut.size() - 1];
        if (input_fraction_bits != kOutputFractionBits) {
            if (input_fraction_bits < kOutputFractionBits) {
                result >>= (kOutputFractionBits - input_fraction_bits);
            } else {
                result <<= (input_fraction_bits - kOutputFractionBits);
            }
        }
        return is_negative ? -result : result;
    }

    // 4. Get table values for quadratic interpolation
    // Need three points: (x0,y0), (x1,y1), (x2,y2)
    const int64_t y1 = kAtanLut[idx];       // Current point
    const int64_t y2 = kAtanLut[idx + 1];   // Next point
    // For the previous point, handle the boundary case
    int64_t y0;
    if (idx > 0) {
        y0 = kAtanLut[idx - 1];  // Previous point
    } else {
        // At the boundary, mirror the slope for better extrapolation
        y0 = y1 - (y2 - y1);
    }

    // 5. Quadratic interpolation
    // The correct Lagrange quadratic formula coefficients for points at (-1,y0), (0,y1), (1,y2):
    // a = (y0 + y2)/2 - y1
    // b = (y2 - y0)/2
    // c = y1
    // c = y0
    const int64_t a = (y0 + y2)/2 - y1;
    const int64_t b = (y2 - y0)/2;
    const int64_t c = y1;

    // Calculate polynomial a*t^2 + b*t + c
    const int64_t t_squared = Primitives::Fixed64Mul(t, t, kOutputFractionBits);
    int64_t result = c;
    result += Primitives::Fixed64Mul(b, t, kOutputFractionBits);
    result += Primitives::Fixed64Mul(a, t_squared, kOutputFractionBits);

    // Apply reciprocal formula if needed
    if (use_reciprocal) {
        // π/2 in our fixed-point format
    constexpr int64_t kHalfPi = 0x000001921FB54442LL;  // pi/2 = 1.5707963267948966
        result = kHalfPi - result;
    }

    // 6. Convert result back to input format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            result >>= (kOutputFractionBits - input_fraction_bits);
        } else {
            result <<= (input_fraction_bits - kOutputFractionBits);
        }
    }

    // Apply sign
    return is_negative ? -result : result;
}

// Fast lookup atan(x) with linear interpolation between table entries
// Input x is in fixed-point format with specified fraction bits representing a value in [-1,1]
// Output is in fixed-point format with the same fraction bits representing atan(x)
}  // namespace math::fp::detail