#pragma once

#include <array>
#include <cstdint>
#include <algorithm>
#include "primitives.h"

namespace math::fp::detail {

// Arccosine lookup table with 1415 entries using multi-region approach
// Region 1: 0.0-0.8 uniform (256+1 points)
// Region 2: 0.8-0.93 Hermite interpolation (128 segments = 387 points)
// Region 3: 0.93-0.99 denser uniform (256+1 points)
// Region 4: 0.99-0.999 even denser (256+1 points)
// Region 5: 0.999-1.0 densest (256+1 points)
// Fixed-point format: Q32.32
inline constexpr std::array<int64_t, 1415> AcosLut = {
    6746518852LL, 6733097057LL, 6719675131LL, 6706252944LL, 
    6692830362LL, 6679407257LL, 6665983496LL, 6652558948LL, 
    6639133481LL, 6625706966LL, 6612279269LL, 6598850259LL, 
    6585419806LL, 6571987775LL, 6558554037LL, 6545118459LL, 
    6531680908LL, 6518241252LL, 6504799358LL, 6491355093LL, 
    6477908325LL, 6464458920LL, 6451006745LL, 6437551665LL, 
    6424093548LL, 6410632258LL, 6397167660LL, 6383699621LL, 
    6370228005LL, 6356752676LL, 6343273499LL, 6329790337LL, 
    6316303054LL, 6302811513LL, 6289315576LL, 6275815107LL, 
    6262309966LL, 6248800016LL, 6235285117LL, 6221765130LL, 
    6208239916LL, 6194709333LL, 6181173241LL, 6167631498LL, 
    6154083963LL, 6140530494LL, 6126970946LL, 6113405178LL, 
    6099833044LL, 6086254401LL, 6072669102LL, 6059077002LL, 
    6045477954LL, 6031871811LL, 6018258425LL, 6004637648LL, 
    5991009330LL, 5977373322LL, 5963729472LL, 5950077629LL, 
    5936417642LL, 5922749356LL, 5909072618LL, 5895387274LL, 
    5881693167LL, 5867990142LL, 5854278042LL, 5840556708LL, 
    5826825981LL, 5813085701LL, 5799335708LL, 5785575840LL, 
    5771805933LL, 5758025825LL, 5744235349LL, 5730434340LL, 
    5716622632LL, 5702800055LL, 5688966441LL, 5675121620LL, 
    5661265420LL, 5647397667LL, 5633518190LL, 5619626811LL, 
    5605723356LL, 5591807646LL, 5577879502LL, 5563938744LL, 
    5549985191LL, 5536018659LL, 5522038965LL, 5508045921LL, 
    5494039342LL, 5480019038LL, 5465984819LL, 5451936493LL, 
    5437873867LL, 5423796746LL, 5409704933LL, 5395598230LL, 
    5381476437LL, 5367339353LL, 5353186773LL, 5339018493LL, 
    5324834305LL, 5310634001LL, 5296417370LL, 5282184198LL, 
    5267934272LL, 5253667375LL, 5239383287LL, 5225081788LL, 
    5210762656LL, 5196425664LL, 5182070585LL, 5167697191LL, 
    5153305248LL, 5138894523LL, 5124464779LL, 5110015778LL, 
    5095547277LL, 5081059032LL, 5066550798LL, 5052022324LL, 
    5037473360LL, 5022903649LL, 5008312936LL, 4993700959LL, 
    4979067456LL, 4964412161LL, 4949734804LL, 4935035113LL, 
    4920312813LL, 4905567627LL, 4890799271LL, 4876007461LL, 
    4861191909LL, 4846352322LL, 4831488407LL, 4816599862LL, 
    4801686386LL, 4786747673LL, 4771783412LL, 4756793289LL, 
    4741776986LL, 4726734180LL, 4711664547LL, 4696567754LL, 
    4681443467LL, 4666291346LL, 4651111049LL, 4635902225LL, 
    4620664523LL, 4605397584LL, 4590101044LL, 4574774537LL, 
    4559417689LL, 4544030121LL, 4528611450LL, 4513161286LL, 
    4497679234LL, 4482164895LL, 4466617860LL, 4451037718LL, 
    4435424050LL, 4419776431LL, 4404094429LL, 4388377606LL, 
    4372625517LL, 4356837711LL, 4341013728LL, 4325153103LL, 
    4309255362LL, 4293320024LL, 4277346599LL, 4261334592LL, 
    4245283496LL, 4229192798LL, 4213061977LL, 4196890501LL, 
    4180677830LL, 4164423415LL, 4148126698LL, 4131787109LL, 
    4115404070LL, 4098976994LL, 4082505279LL, 4065988316LL, 
    4049425485LL, 4032816151LL, 4016159671LL, 3999455389LL, 
    3982702635LL, 3965900727LL, 3949048972LL, 3932146662LL, 
    3915193073LL, 3898187471LL, 3881129104LL, 3864017207LL, 
    3846850997LL, 3829629679LL, 3812352438LL, 3795018443LL, 
    3777626846LL, 3760176781LL, 3742667364LL, 3725097690LL, 
    3707466837LL, 3689773860LL, 3672017794LL, 3654197653LL, 
    3636312428LL, 3618361088LL, 3600342575LL, 3582255811LL, 
    3564099688LL, 3545873075LL, 3527574812LL, 3509203711LL, 
    3490758555LL, 3472238097LL, 3453641059LL, 3434966129LL, 
    3416211962LL, 3397377181LL, 3378460368LL, 3359460071LL, 
    3340374797LL, 3321203015LL, 3301943150LL, 3282593583LL, 
    3263152652LL, 3243618646LL, 3223989805LL, 3204264318LL, 
    3184440320LL, 3164515894LL, 3144489060LL, 3124357781LL, 
    3104119958LL, 3083773422LL, 3063315939LL, 3042745203LL, 
    3022058830LL, 3001254362LL, 2980329255LL, 2959280880LL, 
    2938106518LL, 2916803355LL, 2895368479LL, 2873798871LL, 
    2852091403LL, 2830242833LL, 2808249796LL, 2786108800LL, 
    2763816217LL, 3435973836LL, 2763816217LL, -7158278826LL, 
    3440335912LL, 2756537864LL, -7174499890LL, 3444697989LL, 
    2749242969LL, -7190852520LL, 3449060065LL, 2741931399LL, 
    -7207338414LL, 3453422141LL, 2734603017LL, -7223959298LL, 
    3457784217LL, 2727257686LL, -7240716931LL, 3462146293LL, 
    2719895264LL, -7257613102LL, 3466508369LL, 2712515612LL, 
    -7274649637LL, 3470870446LL, 2705118584LL, -7291828392LL, 
    3475232522LL, 2697704036LL, -7309151260LL, 3479594598LL, 
    2690271821LL, -7326620169LL, 3483956674LL, 2682821789LL, 
    -7344237082LL, 3488318750LL, 2675353789LL, -7362004001LL, 
    3492680826LL, 2667867667LL, -7379922966LL, 3497042903LL, 
    2660363268LL, -7397996055LL, 3501404979LL, 2652840435LL, 
    -7416225385LL, 3505767055LL, 2645299007LL, -7434613119LL, 
    3510129131LL, 2637738822LL, -7453161455LL, 3514491207LL, 
    2630159717LL, -7471872641LL, 3518853283LL, 2622561525LL, 
    -7490748964LL, 3523215360LL, 2614944077LL, -7509792759LL, 
    3527577436LL, 2607307201LL, -7529006407LL, 3531939512LL, 
    2599650724LL, -7548392337LL, 3536301588LL, 2591974470LL, 
    -7567953025LL, 3540663664LL, 2584278260LL, -7587691000LL, 
    3545025740LL, 2576561912LL, -7607608841LL, 3549387816LL, 
    2568825242LL, -7627709180LL, 3553749893LL, 2561068065LL, 
    -7647994703LL, 3558111969LL, 2553290189LL, -7668468152LL, 
    3562474045LL, 2545491424LL, -7689132328LL, 3566836121LL, 
    2537671574LL, -7709990087LL, 3571198197LL, 2529830440LL, 
    -7731044348LL, 3575560273LL, 2521967822LL, -7752298092LL, 
    3579922350LL, 2514083516LL, -7773754362LL, 3584284426LL, 
    2506177314LL, -7795416269LL, 3588646502LL, 2498249006LL, 
    -7817286989LL, 3593008578LL, 2490298378LL, -7839369768LL, 
    3597370654LL, 2482325213LL, -7861667923LL, 3601732730LL, 
    2474329291LL, -7884184844LL, 3606094807LL, 2466310388LL, 
    -7906923997LL, 3610456883LL, 2458268275LL, -7929888924LL, 
    3614818959LL, 2450202723LL, -7953083248LL, 3619181035LL, 
    2442113496LL, -7976510673LL, 3623543111LL, 2434000356LL, 
    -8000174988LL, 3627905187LL, 2425863059LL, -8024080067LL, 
    3632267264LL, 2417701360LL, -8048229875LL, 3636629340LL, 
    2409515008LL, -8072628469LL, 3640991416LL, 2401303748LL, 
    -8097280001LL, 3645353492LL, 2393067321LL, -8122188718LL, 
    3649715568LL, 2384805464LL, -8147358971LL, 3654077644LL, 
    2376517908LL, -8172795213LL, 3658439720LL, 2368204382LL, 
    -8198502004LL, 3662801797LL, 2359864608LL, -8224484014LL, 
    3667163873LL, 2351498304LL, -8250746027LL, 3671525949LL, 
    2343105183LL, -8277292944LL, 3675888025LL, 2334684954LL, 
    -8304129787LL, 3680250101LL, 2326237320LL, -8331261703LL, 
    3684612177LL, 2317761977LL, -8358693967LL, 3688974254LL, 
    2309258619LL, -8386431987LL, 3693336330LL, 2300726932LL, 
    -8414481310LL, 3697698406LL, 2292166597LL, -8442847622LL, 
    3702060482LL, 2283577289LL, -8471536759LL, 3706422558LL, 
    2274958676LL, -8500554704LL, 3710784634LL, 2266310423LL, 
    -8529907600LL, 3715146711LL, 2257632186LL, -8559601751LL, 
    3719508787LL, 2248923615LL, -8589643626LL, 3723870863LL, 
    2240184352LL, -8620039871LL, 3728232939LL, 2231414036LL, 
    -8650797307LL, 3732595015LL, 2222612296LL, -8681922942LL, 
    3736957091LL, 2213778753LL, -8713423976LL, 3741319168LL, 
    2204913024LL, -8745307807LL, 3745681244LL, 2196014715LL, 
    -8777582040LL, 3750043320LL, 2187083425LL, -8810254489LL, 
    3754405396LL, 2178118748LL, -8843333194LL, 3758767472LL, 
    2169120265LL, -8876826421LL, 3763129548LL, 2160087551LL, 
    -8910742672LL, 3767491624LL, 2151020172LL, -8945090697LL, 
    3771853701LL, 2141917686LL, -8979879502LL, 3776215777LL, 
    2132779640LL, -9015118356LL, 3780577853LL, 2123605571LL, 
    -9050816803LL, 3784939929LL, 2114395009LL, -9086984675LL, 
    3789302005LL, 2105147471LL, -9123632097LL, 3793664081LL, 
    2095862466LL, -9160769506LL, 3798026158LL, 2086539489LL, 
    -9198407658LL, 3802388234LL, 2077178027LL, -9236557640LL, 
    3806750310LL, 2067777554LL, -9275230889LL, 3811112386LL, 
    2058337533LL, -9314439200LL, 3815474462LL, 2048857414LL, 
    -9354194746LL, 3819836538LL, 2039336635LL, -9394510088LL, 
    3824198615LL, 2029774622LL, -9435398196LL, 3828560691LL, 
    2020170784LL, -9476872462LL, 3832922767LL, 2010524521LL, 
    -9518946724LL, 3837284843LL, 2000835216LL, -9561635278LL, 
    3841646919LL, 1991102237LL, -9604952901LL, 3846008995LL, 
    1981324937LL, -9648914875LL, 3850371072LL, 1971502655LL, 
    -9693537002LL, 3854733148LL, 1961634711LL, -9738835636LL, 
    3859095224LL, 1951720410LL, -9784827700LL, 3863457300LL, 
    1941759039LL, -9831530716LL, 3867819376LL, 1931749867LL, 
    -9878962832LL, 3872181452LL, 1921692143LL, -9927142850LL, 
    3876543528LL, 1911585098LL, -9976090258LL, 3880905605LL, 
    1901427943LL, -10025825261LL, 3885267681LL, 1891219867LL, 
    -10076368817LL, 3889629757LL, 1880960037LL, -10127742669LL, 
    3893991833LL, 1870647601LL, -10179969392LL, 3898353909LL, 
    1860281678LL, -10233072426LL, 3902715985LL, 1849861367LL, 
    -10287076120LL, 3907078062LL, 1839385741LL, -10342005784LL, 
    3911440138LL, 1828853846LL, -10397887731LL, 3915802214LL, 
    1818264700LL, -10454749333LL, 3920164290LL, 1807617295LL, 
    -10512619075LL, 3924526366LL, 1796910591LL, -10571526615LL, 
    3928888442LL, 1786143520LL, -10631502843LL, 3933250519LL, 
    1775314978LL, -10692579954LL, 3937612595LL, 1764423833LL, 
    -10754791514LL, 3941974671LL, 1753468912LL, -10818172537LL, 
    3946336747LL, 1742449011LL, -10882759570LL, 3950698823LL, 
    1731362886LL, -10948590776LL, 3955060899LL, 1720209252LL, 
    -11015706029LL, 3959422976LL, 1708986784LL, -11084147012LL, 
    3963785052LL, 1697694114LL, -11153957329LL, 3968147128LL, 
    1686329829LL, -11225182612LL, 3972509204LL, 1674892467LL, 
    -11297870653LL, 3976871280LL, 1663380517LL, -11372071529LL, 
    3981233356LL, 1651792417LL, -11447837750LL, 3985595432LL, 
    1640126548LL, -11525224411LL, 3989957509LL, 1628381237LL, 
    -11604289356LL, 3994319585LL, 1616554747LL, -11685093363LL, 
    1616554747LL, 1613813840LL, 1611068492LL, 1608318680LL, 
    1605564381LL, 1602805572LL, 1600042230LL, 1597274330LL, 
    1594501849LL, 1591724764LL, 1588943050LL, 1586156682LL, 
    1583365636LL, 1580569888LL, 1577769411LL, 1574964182LL, 
    1572154173LL, 1569339361LL, 1566519718LL, 1563695218LL, 
    1560865836LL, 1558031544LL, 1555192316LL, 1552348124LL, 
    1549498941LL, 1546644740LL, 1543785492LL, 1540921170LL, 
    1538051745LL, 1535177188LL, 1532297471LL, 1529412563LL, 
    1526522437LL, 1523627062LL, 1520726407LL, 1517820444LL, 
    1514909140LL, 1511992466LL, 1509070390LL, 1506142880LL, 
    1503209905LL, 1500271433LL, 1497327431LL, 1494377866LL, 
    1491422706LL, 1488461917LL, 1485495465LL, 1482523317LL, 
    1479545438LL, 1476561793LL, 1473572347LL, 1470577065LL, 
    1467575911LL, 1464568849LL, 1461555842LL, 1458536853LL, 
    1455511846LL, 1452480782LL, 1449443624LL, 1446400332LL, 
    1443350869LL, 1440295195LL, 1437233270LL, 1434165054LL, 
    1431090507LL, 1428009588LL, 1424922255LL, 1421828466LL, 
    1418728180LL, 1415621354LL, 1412507943LL, 1409387906LL, 
    1406261196LL, 1403127771LL, 1399987584LL, 1396840591LL, 
    1393686744LL, 1390525997LL, 1387358303LL, 1384183615LL, 
    1381001883LL, 1377813060LL, 1374617095LL, 1371413939LL, 
    1368203542LL, 1364985851LL, 1361760816LL, 1358528383LL, 
    1355288500LL, 1352041114LL, 1348786170LL, 1345523613LL, 
    1342253388LL, 1338975438LL, 1335689706LL, 1332396135LL, 
    1329094667LL, 1325785243LL, 1322467802LL, 1319142284LL, 
    1315808628LL, 1312466772LL, 1309116652LL, 1305758206LL, 
    1302391369LL, 1299016076LL, 1295632260LL, 1292239854LL, 
    1288838791LL, 1285429001LL, 1282010415LL, 1278582963LL, 
    1275146573LL, 1271701173LL, 1268246688LL, 1264783044LL, 
    1261310167LL, 1257827979LL, 1254336402LL, 1250835359LL, 
    1247324769LL, 1243804552LL, 1240274624LL, 1236734905LL, 
    1233185308LL, 1229625748LL, 1226056138LL, 1222476391LL, 
    1218886417LL, 1215286126LL, 1211675424LL, 1208054219LL, 
    1204422417LL, 1200779920LL, 1197126631LL, 1193462451LL, 
    1189787280LL, 1186101015LL, 1182403552LL, 1178694786LL, 
    1174974609LL, 1171242914LL, 1167499589LL, 1163744522LL, 
    1159977600LL, 1156198705LL, 1152407721LL, 1148604527LL, 
    1144789002LL, 1140961023LL, 1137120462LL, 1133267193LL, 
    1129401084LL, 1125522005LL, 1121629820LL, 1117724391LL, 
    1113805581LL, 1109873246LL, 1105927243LL, 1101967425LL, 
    1097993642LL, 1094005742LL, 1090003570LL, 1085986968LL, 
    1081955775LL, 1077909828LL, 1073848960LL, 1069773001LL, 
    1065681777LL, 1061575112LL, 1057452826LL, 1053314735LL, 
    1049160653LL, 1044990389LL, 1040803748LL, 1036600532LL, 
    1032380538LL, 1028143559LL, 1023889385LL, 1019617800LL, 
    1015328585LL, 1011021514LL, 1006696360LL, 1002352887LL, 
    997990856LL, 993610023LL, 989210138LL, 984790946LL, 
    980352185LL, 975893589LL, 971414883LL, 966915790LL, 
    962396022LL, 957855287LL, 953293285LL, 948709709LL, 
    944104245LL, 939476572LL, 934826359LL, 930153268LL, 
    925456952LL, 920737056LL, 915993216LL, 911225057LL, 
    906432196LL, 901614238LL, 896770779LL, 891901403LL, 
    887005684LL, 882083183LL, 877133449LL, 872156017LL, 
    867150412LL, 862116142LL, 857052702LL, 851959572LL, 
    846836217LL, 841682083LL, 836496602LL, 831279188LL, 
    826029234LL, 820746118LL, 815429193LL, 810077795LL, 
    804691235LL, 799268803LL, 793809763LL, 788313354LL, 
    782778790LL, 777205255LL, 771591905LL, 765937863LL, 
    760242223LL, 754504042LL, 748722342LL, 742896106LL, 
    737024278LL, 731105760LL, 725139409LL, 719124034LL, 
    713058393LL, 706941194LL, 700771085LL, 694546657LL, 
    688266435LL, 681928879LL, 675532374LL, 669075230LL, 
    662555673LL, 655971843LL, 649321785LL, 642603441LL, 
    635814648LL, 628953124LL, 622016463LL, 615002120LL, 
    607907409LL, 607907409LL, 606836096LL, 605762902LL, 
    604687815LL, 603610826LL, 602531926LL, 601451102LL, 
    600368345LL, 599283645LL, 598196991LL, 597108372LL, 
    596017778LL, 594925197LL, 593830619LL, 592734033LL, 
    591635427LL, 590534790LL, 589432111LL, 588327378LL, 
    587220580LL, 586111705LL, 585000741LL, 583887677LL, 
    582772500LL, 581655197LL, 580535758LL, 579414169LL, 
    578290418LL, 577164493LL, 576036380LL, 574906066LL, 
    573773539LL, 572638786LL, 571501793LL, 570362547LL, 
    569221034LL, 568077241LL, 566931154LL, 565782759LL, 
    564632042LL, 563478988LL, 562323583LL, 561165814LL, 
    560005664LL, 558843120LL, 557678165LL, 556510786LL, 
    555340967LL, 554168692LL, 552993946LL, 551816713LL, 
    550636977LL, 549454722LL, 548269932LL, 547082589LL, 
    545892679LL, 544700182LL, 543505084LL, 542307366LL, 
    541107011LL, 539904001LL, 538698319LL, 537489947LL, 
    536278866LL, 535065059LL, 533848505LL, 532629188LL, 
    531407087LL, 530182184LL, 528954459LL, 527723891LL, 
    526490463LL, 525254152LL, 524014939LL, 522772803LL, 
    521527724LL, 520279679LL, 519028648LL, 517774610LL, 
    516517541LL, 515257421LL, 513994226LL, 512727934LL, 
    511458521LL, 510185966LL, 508910243LL, 507631329LL, 
    506349200LL, 505063831LL, 503775198LL, 502483276LL, 
    501188039LL, 499889460LL, 498587515LL, 497282177LL, 
    495973419LL, 494661213LL, 493345533LL, 492026350LL, 
    490703637LL, 489377363LL, 488047502LL, 486714022LL, 
    485376895LL, 484036090LL, 482691576LL, 481343322LL, 
    479991298LL, 478635470LL, 477275806LL, 475912274LL, 
    474544841LL, 473173471LL, 471798132LL, 470418788LL, 
    469035404LL, 467647944LL, 466256372LL, 464860650LL, 
    463460742LL, 462056609LL, 460648212LL, 459235513LL, 
    457818471LL, 456397046LL, 454971197LL, 453540883LL, 
    452106060LL, 450666686LL, 449222718LL, 447774110LL, 
    446320817LL, 444862794LL, 443399993LL, 441932368LL, 
    440459870LL, 438982451LL, 437500059LL, 436012646LL, 
    434520158LL, 433022544LL, 431519750LL, 430011721LL, 
    428498404LL, 426979741LL, 425455674LL, 423926147LL, 
    422391099LL, 420850470LL, 419304199LL, 417752223LL, 
    416194478LL, 414630899LL, 413061419LL, 411485972LL, 
    409904489LL, 408316899LL, 406723131LL, 405123111LL, 
    403516767LL, 401904021LL, 400284796LL, 398659014LL, 
    397026593LL, 395387453LL, 393741508LL, 392088673LL, 
    390428860LL, 388761981LL, 387087943LL, 385406654LL, 
    383718019LL, 382021939LL, 380318315LL, 378607046LL, 
    376888027LL, 375161152LL, 373426311LL, 371683394LL, 
    369932285LL, 368172869LL, 366405025LL, 364628631LL, 
    362843562LL, 361049688LL, 359246878LL, 357434996LL, 
    355613905LL, 353783460LL, 351943518LL, 350093928LL, 
    348234535LL, 346365184LL, 344485710LL, 342595948LL, 
    340695726LL, 338784869LL, 336863196LL, 334930519LL, 
    332986649LL, 331031387LL, 329064530LL, 327085869LL, 
    325095189LL, 323092268LL, 321076876LL, 319048778LL, 
    317007728LL, 314953477LL, 312885762LL, 310804317LL, 
    308708862LL, 306599111LL, 304474767LL, 302335521LL, 
    300181056LL, 298011042LL, 295825135LL, 293622982LL, 
    291404213LL, 289168447LL, 286915286LL, 284644316LL, 
    282355109LL, 280047217LL, 277720175LL, 275373495LL, 
    273006674LL, 270619181LL, 268210464LL, 265779948LL, 
    263327028LL, 260851071LL, 258351417LL, 255827370LL, 
    253278200LL, 250703142LL, 248101390LL, 245472094LL, 
    242814360LL, 240127244LL, 237409747LL, 234660816LL, 
    231879330LL, 229064105LL, 226213882LL, 223327319LL, 
    220402989LL, 217439369LL, 214434829LL, 211387624LL, 
    208295883LL, 205157591LL, 201970579LL, 198732502LL, 
    195440823LL, 192092786LL, 192092786LL, 191717175LL, 
    191340828LL, 190963739LL, 190585905LL, 190207320LL, 
    189827981LL, 189447883LL, 189067021LL, 188685391LL, 
    188302988LL, 187919808LL, 187535845LL, 187151095LL, 
    186765552LL, 186379213LL, 185992071LL, 185604123LL, 
    185215363LL, 184825785LL, 184435385LL, 184044157LL, 
    183652097LL, 183259198LL, 182865455LL, 182470864LL, 
    182075417LL, 181679111LL, 181281939LL, 180883895LL, 
    180484973LL, 180085169LL, 179684476LL, 179282887LL, 
    178880398LL, 178477001LL, 178072691LL, 177667462LL, 
    177261306LL, 176854219LL, 176446193LL, 176037221LL, 
    175627298LL, 175216416LL, 174804569LL, 174391750LL, 
    173977952LL, 173563168LL, 173147391LL, 172730614LL, 
    172312829LL, 171894029LL, 171474207LL, 171053355LL, 
    170631466LL, 170208531LL, 169784544LL, 169359495LL, 
    168933378LL, 168506184LL, 168077904LL, 167648531LL, 
    167218056LL, 166786470LL, 166353766LL, 165919933LL, 
    165484964LL, 165048849LL, 164611579LL, 164173145LL, 
    163733538LL, 163292748LL, 162850765LL, 162407580LL, 
    161963183LL, 161517563LL, 161070712LL, 160622618LL, 
    160173271LL, 159722660LL, 159270775LL, 158817605LL, 
    158363139LL, 157907365LL, 157450273LL, 156991850LL, 
    156532086LL, 156070967LL, 155608483LL, 155144621LL, 
    154679368LL, 154212713LL, 153744641LL, 153275141LL, 
    152804198LL, 152331801LL, 151857934LL, 151382585LL, 
    150905739LL, 150427383LL, 149947500LL, 149466078LL, 
    148983101LL, 148498553LL, 148012420LL, 147524686LL, 
    147035334LL, 146544349LL, 146051714LL, 145557412LL, 
    145061427LL, 144563741LL, 144064336LL, 143563194LL, 
    143060298LL, 142555628LL, 142049166LL, 141540892LL, 
    141030787LL, 140518831LL, 140005004LL, 139489284LL, 
    138971652LL, 138452085LL, 137930561LL, 137407059LL, 
    136881555LL, 136354027LL, 135824451LL, 135292802LL, 
    134759057LL, 134223189LL, 133685175LL, 133144987LL, 
    132602600LL, 132057985LL, 131511116LL, 130961964LL, 
    130410501LL, 129856696LL, 129300520LL, 128741941LL, 
    128180930LL, 127617453LL, 127051478LL, 126482971LL, 
    125911898LL, 125338223LL, 124761912LL, 124182927LL, 
    123601230LL, 123016784LL, 122429549LL, 121839484LL, 
    121246548LL, 120650699LL, 120051893LL, 119450087LL, 
    118845233LL, 118237287LL, 117626199LL, 117011921LL, 
    116394401LL, 115773589LL, 115149431LL, 114521871LL, 
    113890855LL, 113256324LL, 112618218LL, 111976477LL, 
    111331038LL, 110681836LL, 110028804LL, 109371874LL, 
    108710976LL, 108046035LL, 107376978LL, 106703727LL, 
    106026202LL, 105344320LL, 104657996LL, 103967143LL, 
    103271669LL, 102571481LL, 101866481LL, 101156568LL, 
    100441639LL, 99721585LL, 98996296LL, 98265654LL, 
    97529539LL, 96787828LL, 96040389LL, 95287088LL, 
    94527786LL, 93762335LL, 92990585LL, 92212378LL, 
    91427548LL, 90635923LL, 89837324LL, 89031562LL, 
    88218443LL, 87397760LL, 86569298LL, 85732832LL, 
    84888126LL, 84034930LL, 83172983LL, 82302011LL, 
    81421724LL, 80531816LL, 79631965LL, 78721830LL, 
    77801050LL, 76869242LL, 75926001LL, 74970894LL, 
    74003463LL, 73023218LL, 72029635LL, 71022155LL, 
    70000177LL, 68963058LL, 67910103LL, 66840564LL, 
    65753631LL, 64648428LL, 63524001LL, 62379311LL, 
    61213220LL, 60024481LL, 58811721LL, 57573422LL, 
    56307899LL, 55013274LL, 53687440LL, 52328027LL, 
    50932345LL, 49497326LL, 48019444LL, 46494611LL, 
    44918047LL, 43284099LL, 41586004LL, 39815555LL, 
    37962629LL, 36014501LL, 33954786LL, 31761783LL, 
    29405688LL, 26843589LL, 24009628LL, 20792941LL, 
    16977359LL, 12004802LL, 0LL
};

// Fixed-point constants
constexpr int kFractionBits = 32;
constexpr int64_t kOne = 1LL << kFractionBits;
constexpr int64_t kPi = 13493037704LL;  // pi in Q32.32 format (pi * 2^32)

/**
 * @brief Calculate arccosine value with multi-region interpolation
 * @param x Fixed-point value in [-1,1] range with input_fraction_bits precision
 * @param input_fraction_bits Precision (fractional bits) of the input value
 * @return Fixed-point arccosine value with input_fraction_bits precision in [0, pi] range
 */
inline int64_t LookupAcos(int64_t x, int input_fraction_bits) noexcept {
    // Region boundary constants
    constexpr int64_t kThreshold_0_8 = kOne * 4LL / 5LL;         // 0.8
    constexpr int64_t kThreshold_0_93 = kOne * 93LL / 100LL;      // 0.93
    constexpr int64_t kThreshold_0_99 = kOne * 99LL / 100LL;     // 0.99
    constexpr int64_t kThreshold_0_999 = kOne * 999LL / 1000LL;  // 0.999
    constexpr int64_t kThresholdSmall = kOne - (kOne >> 16);     // 0.999984741211

    // Region size constants
    constexpr int kRegion1Size = 257;  // 256 + 1
    constexpr int kRegion2Size = 387;  // 129 * 3
    constexpr int kRegion3Size = 257;  // 256 + 1
    constexpr int kRegion4Size = 257;  // 256 + 1

    // Adjust input to internal precision
    int64_t scaled_x;
    if (input_fraction_bits > kFractionBits) {
        scaled_x = x >> (input_fraction_bits - kFractionBits);
    } else if (input_fraction_bits < kFractionBits) {
        scaled_x = x << (kFractionBits - input_fraction_bits);
    } else {
        scaled_x = x;
    }

    // Boundary check: ensure input is in [-kOne, kOne] range
    if (scaled_x >= kOne) {
        int64_t result = 0;
        // Adjust output precision
        if (input_fraction_bits > kFractionBits) {
            result = result << (input_fraction_bits - kFractionBits);
        } else if (input_fraction_bits < kFractionBits) {
            result = result >> (kFractionBits - input_fraction_bits);
        }
        return result;
    }
    if (scaled_x <= -kOne) {
        int64_t result = kPi;
        // Adjust output precision
        if (input_fraction_bits > kFractionBits) {
            result = result << (input_fraction_bits - kFractionBits);
        } else if (input_fraction_bits < kFractionBits) {
            result = result >> (kFractionBits - input_fraction_bits);
        }
        return result;
    }

    bool is_negative = scaled_x < 0;
    scaled_x = is_negative ? -scaled_x : scaled_x;

    // Handle extremely small angles: x > 0.999984741211, use sqrt(2(1-x)) approximation
    if (scaled_x > kThresholdSmall) {
        int64_t epsilon = kOne - scaled_x;
        int64_t sqrt_input = (epsilon << 1);
        int64_t result = Primitives::Fixed64SqrtFast(sqrt_input, kFractionBits);
        
        // Adjust for negative input
        if (is_negative) {
            result = kPi - result;
        }
        
        // Adjust output precision
        if (input_fraction_bits > kFractionBits) {
            result = result << (input_fraction_bits - kFractionBits);
        } else if (input_fraction_bits < kFractionBits) {
            result = result >> (kFractionBits - input_fraction_bits);
        }
        return result;
    }

    int64_t result;
    // Region 1: [0, 0.8], use 256-point uniform interpolation
    if (scaled_x < kThreshold_0_8) {
        constexpr int kShift = 8;  // log2(256)
        int index = (scaled_x << kShift) / kThreshold_0_8;  // x * 256 / (0.8 * kOne)
        
        // Calculate interpolation
        int64_t x0 = (index * kThreshold_0_8) >> kShift;  // index * 0.8 * kOne / 256
        int64_t dx = scaled_x - x0;
        constexpr int64_t kDelta = kThreshold_0_8 >> kShift;  // 0.8 * kOne / 256
        result = AcosLut[index] + ((AcosLut[index + 1] - AcosLut[index]) * dx) / kDelta;
    }
    // Region 2: [0.8, 0.93], use 128-segment Hermite interpolation
    else if (scaled_x < kThreshold_0_93) {
        constexpr int kSegments = 128;
        constexpr int64_t kRange = kOne * 13LL / 100LL;  // 0.13 * kOne
        int seg = ((scaled_x - kThreshold_0_8) * kSegments) / kRange;  // (x - 0.8) / (0.13/128)
        
        constexpr int kPointsPerSegment = 3;  // x, y, derivative
        int base_idx = kRegion1Size + seg * kPointsPerSegment;
        int64_t x0 = AcosLut[base_idx];
        int64_t y0 = AcosLut[base_idx + 1];
        int64_t dydx = AcosLut[base_idx + 2];

        int64_t dx = scaled_x - x0;
        result = y0 + ((dydx * dx) >> kFractionBits);
    }
    // Region 3: [0.93, 0.99], use 256-point linear interpolation
    else if (scaled_x < kThreshold_0_99) {
        constexpr int base_idx = kRegion1Size + kRegion2Size;
        int64_t rel_x = scaled_x - kThreshold_0_93;  // x - 0.93
        constexpr int64_t kScale = kOne * 6LL / 100LL;   // 0.06 * kOne

        constexpr int kShift = 8;  // log2(256)
        int index = (rel_x << kShift) / kScale;  // rel_x * 256 / (0.06 * kOne)
        
        int idx = base_idx + index;
        int64_t x1 = kThreshold_0_93 + ((kScale * index) >> kShift);  // 0.93 + (0.06 * index / 256)
        int64_t x2 = kThreshold_0_93 + ((kScale * (index + 1)) >> kShift);

        int64_t alpha = ((scaled_x - x1) << kFractionBits) / (x2 - x1);
        result = ((AcosLut[idx] * (kOne - alpha)) + (AcosLut[idx + 1] * alpha)) >> kFractionBits;
    }
    // Region 4: [0.99, 0.999], use 256-point linear interpolation
    else if (scaled_x < kThreshold_0_999) {
        constexpr int base_idx = kRegion1Size + kRegion2Size + kRegion3Size;
        int64_t rel_x = scaled_x - kThreshold_0_99;  // x - 0.99
        constexpr int64_t kScale = kOne * 9LL / 1000LL;  // 0.009 * kOne

        constexpr int kShift = 8;  // log2(256)
        int index = (rel_x << kShift) / kScale;  // rel_x * 256 / (0.009 * kOne)
        
        int idx = base_idx + index;
        int64_t x1 = kThreshold_0_99 + ((kScale * index) >> kShift);  // 0.99 + (0.009 * index / 256)
        int64_t x2 = kThreshold_0_99 + ((kScale * (index + 1)) >> kShift);

        int64_t alpha = ((scaled_x - x1) << kFractionBits) / (x2 - x1);
        result = ((AcosLut[idx] * (kOne - alpha)) + (AcosLut[idx + 1] * alpha)) >> kFractionBits;
    }
    // Region 5: [0.999, 1.0), use 256-point linear interpolation
    else {
        constexpr int base_idx = kRegion1Size + kRegion2Size + kRegion3Size + kRegion4Size;
        int64_t rel_x = scaled_x - kThreshold_0_999;  // x - 0.999
        constexpr int64_t kScale = kOne / 1000LL;           // 0.001 * kOne

        constexpr int kShift = 8;  // log2(256)
        int index = (rel_x << kShift) / kScale;  // rel_x * 256 / (0.001 * kOne)
        
        int idx = base_idx + index;
        int64_t x1 = kThreshold_0_999 + ((kScale * index) >> kShift);  // 0.999 + (0.001 * index / 256)
        int64_t x2 = kThreshold_0_999 + ((kScale * (index + 1)) >> kShift);

        int64_t alpha = ((scaled_x - x1) << kFractionBits) / (x2 - x1);
        result = ((AcosLut[idx] * (kOne - alpha)) + (AcosLut[idx + 1] * alpha)) >> kFractionBits;
    }

    // Adjust for negative input
    if (is_negative) {
        result = kPi - result;
    }

    // Adjust output precision
    if (input_fraction_bits > kFractionBits) {
        result = result << (input_fraction_bits - kFractionBits);
    } else if (input_fraction_bits < kFractionBits) {
        result = result >> (kFractionBits - input_fraction_bits);
    }

    return result;
}

} // namespace math::fp::detail
