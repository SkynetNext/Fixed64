#pragma once

#include <stdint.h>
#include <array>
#include "primitives.h"

// Log2 lookup table with 256 entries
// Covers the range [1,2) with values in Q23.40 format
// Generated with mpmath library at 100 digits precision

namespace math::fp::detail {
// Table maps x in [1,2) to log2(x)
// Values stored in Q23.40 fixed-point format
inline constexpr std::array<int64_t, 256> kLog2Lut = {
    0x0000000000000000LL, // log2(1.000000000000000) = 0.000000000000000
    0x00000001720D9C06LL, // log2(1.003921568627451) = 0.005646563141142
    0x00000002E2A9E2DELL, // log2(1.007843137254902) = 0.011271112335020
    0x0000000451D7B2E4LL, // log2(1.011764705882353) = 0.016873818564396
    0x00000005BF99E1F1LL, // log2(1.015686274509804) = 0.022454850827696
    0x000000072BF33D77LL, // log2(1.019607843137255) = 0.028014376169597
    0x0000000896E68AA7LL, // log2(1.023529411764706) = 0.033552559711027
    0x0000000A00768690LL, // log2(1.027450980392157) = 0.039069564678592
    0x0000000B68A5E63ALL, // log2(1.031372549019608) = 0.044565552433444
    0x0000000CCF7756CELL, // log2(1.035294117647059) = 0.050040682499595
    0x0000000E34ED7DABLL, // log2(1.039215686274510) = 0.055495112591704
    0x0000000F990AF88BLL, // log2(1.043137254901961) = 0.060928998642332
    0x00000010FBD25D9FLL, // log2(1.047058823529412) = 0.066342494828696
    0x000000125D463BA9LL, // log2(1.050980392156863) = 0.071735753598915
    0x00000013BD691A1ALL, // log2(1.054901960784314) = 0.077108925697766
    0x000000151C3D792ELL, // log2(1.058823529411765) = 0.082462160191973
    0x0000001679C5D209LL, // log2(1.062745098039216) = 0.087795604495014
    0x00000017D60496CFLL, // log2(1.066666666666667) = 0.093109404391481
    0x0000001930FC32BFLL, // log2(1.070588235294118) = 0.098403704060995
    0x0000001A8AAF0A4CLL, // log2(1.074509803921569) = 0.103678646101669
    0x0000001BE31F7B3BLL, // log2(1.078431372549020) = 0.108934371553164
    0x0000001D3A4FDCB4LL, // log2(1.082352941176471) = 0.114171019919311
    0x0000001E90427F62LL, // log2(1.086274509803921) = 0.119388729190330
    0x0000001FE4F9AD86LL, // log2(1.090196078431372) = 0.124587635864649
    0x000000213877AB11LL, // log2(1.094117647058824) = 0.129767874970330
    0x000000228ABEB5BBLL, // log2(1.098039215686275) = 0.134929580086109
    0x00000023DBD10518LL, // log2(1.101960784313726) = 0.140072883362068
    0x000000252BB0CAB0LL, // log2(1.105882352941177) = 0.145197915539936
    0x000000267A603215LL, // log2(1.109803921568628) = 0.150304805973024
    0x00000027C7E160F8LL, // log2(1.113725490196078) = 0.155393682645824
    0x000000291436773BLL, // log2(1.117647058823529) = 0.160464672193246
    0x0000002A5F618F0ELL, // log2(1.121568627450980) = 0.165517899919531
    0x0000002BA964BCFBLL, // log2(1.125490196078431) = 0.170553489816830
    0x0000002CF2420FFELL, // log2(1.129411764705882) = 0.175571564583454
    0x0000002E39FB9198LL, // log2(1.133333333333333) = 0.180572245641821
    0x0000002F809345E4LL, // log2(1.137254901960784) = 0.185555653156077
    0x00000030C60B2BA7LL, // log2(1.141176470588235) = 0.190521906049426
    0x000000320A653C64LL, // log2(1.145098039215686) = 0.195471122021159
    0x000000334DA36C70LL, // log2(1.149019607843137) = 0.200403417563390
    0x000000348FC7AB03LL, // log2(1.152941176470588) = 0.205318907977506
    0x00000035D0D3E248LL, // log2(1.156862745098039) = 0.210217707390346
    0x0000003710C9F770LL, // log2(1.160784313725490) = 0.215099928770092
    0x000000384FABCAC5LL, // log2(1.164705882352941) = 0.219965683941908
    0x000000398D7B37B9LL, // log2(1.168627450980392) = 0.224815083603304
    0x0000003ACA3A14F4LL, // log2(1.172549019607843) = 0.229648237339247
    0x0000003C05EA346BLL, // log2(1.176470588235294) = 0.234465253637023
    0x0000003D408D6369LL, // log2(1.180392156862745) = 0.239266239900844
    0x0000003E7A256AA3LL, // log2(1.184313725490196) = 0.244051302466221
    0x0000003FB2B40E47LL, // log2(1.188235294117647) = 0.248820546614093
    0x00000040EA3B0E0BLL, // log2(1.192156862745098) = 0.253574076584728
    0x0000004220BC253ALL, // log2(1.196078431372549) = 0.258311995591391
    0x0000004356390AC7LL, // log2(1.200000000000000) = 0.263034405833794
    0x000000448AB37157LL, // log2(1.203921568627451) = 0.267741408511321
    0x00000045BE2D0752LL, // log2(1.207843137254902) = 0.272433103836043
    0x00000046F0A776F2LL, // log2(1.211764705882353) = 0.277109591045517
    0x000000482224664ELL, // log2(1.215686274509804) = 0.281770968415380
    0x0000004952A57768LL, // log2(1.219607843137255) = 0.286417333271745
    0x0000004A822C483ELL, // log2(1.223529411764706) = 0.291048782003390
    0x0000004BB0BA72D3LL, // log2(1.227450980392157) = 0.295665410073760
    0x0000004CDE518D3DLL, // log2(1.231372549019608) = 0.300267312032769
    0x0000004E0AF329B3LL, // log2(1.235294117647059) = 0.304854581528421
    0x0000004F36A0D699LL, // log2(1.239215686274510) = 0.309427311318245
    0x00000050615C1E8ELL, // log2(1.243137254901961) = 0.313985593280549
    0x000000518B268872LL, // log2(1.247058823529412) = 0.318529518425497
    0x00000052B401977BLL, // log2(1.250980392156863) = 0.323059176906011
    0x00000053DBEECB3BLL, // log2(1.254901960784314) = 0.327574658028504
    0x0000005502EF9FAALL, // log2(1.258823529411765) = 0.332076050263445
    0x0000005629058D39LL, // log2(1.262745098039216) = 0.336563441255759
    0x000000574E3208D4LL, // log2(1.266666666666667) = 0.341036917835067
    0x00000058727683F6LL, // log2(1.270588235294118) = 0.345496566025767
    0x0000005995D46CABLL, // log2(1.274509803921569) = 0.349942471056959
    0x0000005AB84D2DA4LL, // log2(1.278431372549020) = 0.354374717372220
    0x0000005BD9E22E39LL, // log2(1.282352941176471) = 0.358793388639225
    0x0000005CFA94D27ALL, // log2(1.286274509803922) = 0.363198567759226
    0x0000005E1A667B35LL, // log2(1.290196078431373) = 0.367590336876384
    0x0000005F39588602LL, // log2(1.294117647058824) = 0.371968777386958
    0x00000060576C4D4DLL, // log2(1.298039215686275) = 0.376333969948360
    0x0000006174A3285FLL, // log2(1.301960784313726) = 0.380685994488067
    0x0000006290FE6B68LL, // log2(1.305882352941176) = 0.385024930212404
    0x00000063AC7F6789LL, // log2(1.309803921568627) = 0.389350855615194
    0x00000064C7276ADDLL, // log2(1.313725490196078) = 0.393663848486277
    0x00000065E0F7C083LL, // log2(1.317647058823529) = 0.397963985919902
    0x00000066F9F1B0A3LL, // log2(1.321568627450980) = 0.402251344323001
    0x000000681216807FLL, // log2(1.325490196078431) = 0.406525999423326
    0x0000006929677273LL, // log2(1.329411764705882) = 0.410788026277486
    0x0000006A3FE5C604LL, // log2(1.333333333333333) = 0.415037499278844
    0x0000006B5592B7E5LL, // log2(1.337254901960784) = 0.419274492165315
    0x0000006C6A6F8203LL, // log2(1.341176470588235) = 0.423499078027040
    0x0000006D7E7D5B88LL, // log2(1.345098039215686) = 0.427711329313954
    0x0000006E91BD78E8LL, // log2(1.349019607843137) = 0.431911317843240
    0x0000006FA4310BE8LL, // log2(1.352941176470588) = 0.436099114806673
    0x00000070B5D943A4LL, // log2(1.356862745098039) = 0.440274790777867
    0x00000071C6B74C99LL, // log2(1.360784313725490) = 0.444438415719403
    0x00000072D6CC50ACLL, // log2(1.364705882352941) = 0.448590058989870
    0x00000073E619772FLL, // log2(1.368627450980392) = 0.452729789350794
    0x00000074F49FE4F0LL, // log2(1.372549019607843) = 0.456857674973471
    0x000000760260BC36LL, // log2(1.376470588235294) = 0.460973783445703
    0x000000770F5D1CD2LL, // log2(1.380392156862745) = 0.465078181778439
    0x000000781B96241FLL, // log2(1.384313725490196) = 0.469170936412322
    0x00000079270CED0FLL, // log2(1.388235294117647) = 0.473252113224140
    0x0000007A31C2902CLL, // log2(1.392156862745098) = 0.477321777533186
    0x0000007B3BB823A3LL, // log2(1.396078431372549) = 0.481379994107540
    0x0000007C44EEBB4CLL, // log2(1.400000000000000) = 0.485426827170242
    0x0000007D4D6768AALL, // log2(1.403921568627451) = 0.489462340405398
    0x0000007E55233AF9LL, // log2(1.407843137254902) = 0.493486596964193
    0x0000007F5C233F32LL, // log2(1.411764705882353) = 0.497499659470817
    0x0000008062688010LL, // log2(1.415686274509804) = 0.501501590028313
    0x0000008167F40616LL, // log2(1.419607843137255) = 0.505492450224347
    0x000000826CC6D799LL, // log2(1.423529411764706) = 0.509472301136893
    0x0000008370E1F8C3LL, // log2(1.427450980392157) = 0.513441203339838
    0x0000008474466B99LL, // log2(1.431372549019608) = 0.517399216908522
    0x0000008576F53002LL, // log2(1.435294117647059) = 0.521346401425185
    0x0000008678EF43CDLL, // log2(1.439215686274510) = 0.525282815984355
    0x000000877A35A2B8LL, // log2(1.443137254901961) = 0.529208519198155
    0x000000887AC94672LL, // log2(1.447058823529412) = 0.533123569201538
    0x000000897AAB26A4LL, // log2(1.450980392156863) = 0.537028023657454
    0x0000008A79DC38F7LL, // log2(1.454901960784314) = 0.540921939761945
    0x0000008B785D7115LL, // log2(1.458823529411765) = 0.544805374249173
    0x0000008C762FC0B5LL, // log2(1.462745098039216) = 0.548678383396380
    0x0000008D7354179BLL, // log2(1.466666666666667) = 0.552541023028779
    0x0000008E6FCB639FLL, // log2(1.470588235294118) = 0.556393348524385
    0x0000008F6B9690B5LL, // log2(1.474509803921569) = 0.560235414818779
    0x0000009066B688ECLL, // log2(1.478431372549020) = 0.564067276409806
    0x00000091612C347ALL, // log2(1.482352941176471) = 0.567888987362215
    0x000000925AF879BDLL, // log2(1.486274509803922) = 0.571700601312234
    0x00000093541C3D3FLL, // log2(1.490196078431373) = 0.575502171472090
    0x000000944C9861C0LL, // log2(1.494117647058824) = 0.579293750634464
    0x00000095446DC835LL, // log2(1.498039215686275) = 0.583075391176891
    0x000000963B9D4FCFLL, // log2(1.501960784313725) = 0.586847145066099
    0x000000973227D602LL, // log2(1.505882352941176) = 0.590609063862298
    0x00000098280E3687LL, // log2(1.509803921568627) = 0.594361198723406
    0x000000991D514B60LL, // log2(1.513725490196078) = 0.598103600409223
    0x0000009A11F1ECE0LL, // log2(1.517647058823529) = 0.601836319285552
    0x0000009B05F0F1ABLL, // log2(1.521568627450980) = 0.605559405328270
    0x0000009BF94F2EBELL, // log2(1.525490196078431) = 0.609272908127334
    0x0000009CEC0D7773LL, // log2(1.529411764705882) = 0.612976876890753
    0x0000009DDE2C9D81LL, // log2(1.533333333333333) = 0.616671360448494
    0x0000009ECFAD7107LL, // log2(1.537254901960784) = 0.620356407256350
    0x0000009FC090C08CLL, // log2(1.541176470588235) = 0.624032065399749
    0x000000A0B0D75902LL, // log2(1.545098039215686) = 0.627698382597518
    0x000000A1A08205CELL, // log2(1.549019607843137) = 0.631355406205607
    0x000000A28F9190C9LL, // log2(1.552941176470588) = 0.635003183220752
    0x000000A37E06C247LL, // log2(1.556862745098039) = 0.638641760284100
    0x000000A46BE26116LL, // log2(1.560784313725490) = 0.642271183684791
    0x000000A559253287LL, // log2(1.564705882352941) = 0.645891499363488
    0x000000A645CFFA6FLL, // log2(1.568627450980392) = 0.649502752915867
    0x000000A731E37B2BLL, // log2(1.572549019607843) = 0.653104989596062
    0x000000A81D6075A5LL, // log2(1.576470588235294) = 0.656698254320071
    0x000000A90847A956LL, // log2(1.580392156862745) = 0.660282591669109
    0x000000A9F299D44BLL, // log2(1.584313725490196) = 0.663858045892937
    0x000000AADC57B32ALL, // log2(1.588235294117647) = 0.667424660913129
    0x000000ABC5820130LL, // log2(1.592156862745098) = 0.670982480326318
    0x000000ACAE19783CLL, // log2(1.596078431372549) = 0.674531547407389
    0x000000AD961ED0CBLL, // log2(1.600000000000000) = 0.678071905112638
    0x000000AE7D92C203LL, // log2(1.603921568627451) = 0.681603596082891
    0x000000AF647601AFLL, // log2(1.607843137254902) = 0.685126662646588
    0x000000B04AC94448LL, // log2(1.611764705882353) = 0.688641146822825
    0x000000B1308D3CF6LL, // log2(1.615686274509804) = 0.692147090324360
    0x000000B215C29D94LL, // log2(1.619607843137255) = 0.695644534560587
    0x000000B2FA6A16B0LL, // log2(1.623529411764706) = 0.699133520640467
    0x000000B3DE845793LL, // log2(1.627450980392157) = 0.702614089375429
    0x000000B4C2120E42LL, // log2(1.631372549019608) = 0.706086281282234
    0x000000B5A513E782LL, // log2(1.635294117647059) = 0.709550136585806
    0x000000B6878A8ED7LL, // log2(1.639215686274510) = 0.713005695222025
    0x000000B76976AE8DLL, // log2(1.643137254901961) = 0.716452996840494
    0x000000B84AD8EFB7LL, // log2(1.647058823529412) = 0.719892080807265
    0x000000B92BB1FA34LL, // log2(1.650980392156863) = 0.723322986207538
    0x000000BA0C0274B2LL, // log2(1.654901960784314) = 0.726745751848327
    0x000000BAEBCB04ACLL, // log2(1.658823529411765) = 0.730160416261092
    0x000000BBCB0C4E76LL, // log2(1.662745098039216) = 0.733567017704341
    0x000000BCA9C6F538LL, // log2(1.666666666666667) = 0.736965594166206
    0x000000BD87FB9AF3LL, // log2(1.670588235294118) = 0.740356183366980
    0x000000BE65AAE086LL, // log2(1.674509803921569) = 0.743738822761633
    0x000000BF42D565AELL, // log2(1.678431372549020) = 0.747113549542289
    0x000000C01F7BC90ALL, // log2(1.682352941176471) = 0.750480400640688
    0x000000C0FB9EA81DLL, // log2(1.686274509803922) = 0.753839412730602
    0x000000C1D73E9F51LL, // log2(1.690196078431373) = 0.757190622230240
    0x000000C2B25C49FALL, // log2(1.694117647058824) = 0.760534065304611
    0x000000C38CF84258LL, // log2(1.698039215686274) = 0.763869777867867
    0x000000C46713219ALL, // log2(1.701960784313725) = 0.767197795585621
    0x000000C540AD7FE0LL, // log2(1.705882352941176) = 0.770518153877233
    0x000000C619C7F43ELL, // log2(1.709803921568627) = 0.773830887918068
    0x000000C6F26314BDLL, // log2(1.713725490196078) = 0.777136032641740
    0x000000C7CA7F7660LL, // log2(1.717647058823529) = 0.780433622742315
    0x000000C8A21DAD25LL, // log2(1.721568627450980) = 0.783723692676500
    0x000000C9793E4C06LL, // log2(1.725490196078431) = 0.787006276665802
    0x000000CA4FE1E4FFLL, // log2(1.729411764705882) = 0.790281408698663
    0x000000CB2609090CLL, // log2(1.733333333333333) = 0.793549122532574
    0x000000CBFBB4482DLL, // log2(1.737254901960784) = 0.796809451696160
    0x000000CCD0E4316CLL, // log2(1.741176470588235) = 0.800062429491248
    0x000000CDA59952D8LL, // log2(1.745098039215686) = 0.803308088994902
    0x000000CE79D4398DLL, // log2(1.749019607843137) = 0.806546463061447
    0x000000CF4D9571B5LL, // log2(1.752941176470588) = 0.809777584324460
    0x000000D020DD8687LL, // log2(1.756862745098039) = 0.813001485198746
    0x000000D0F3AD024DLL, // log2(1.760784313725490) = 0.816218197882289
    0x000000D1C6046E67LL, // log2(1.764705882352941) = 0.819427754358179
    0x000000D297E45346LL, // log2(1.768627450980392) = 0.822630186396523
    0x000000D3694D3877LL, // log2(1.772549019607843) = 0.825825525556330
    0x000000D43A3FA49FLL, // log2(1.776470588235294) = 0.829013803187377
    0x000000D50ABC1D7FLL, // log2(1.780392156862745) = 0.832195050432057
    0x000000D5DAC327F7LL, // log2(1.784313725490196) = 0.835369298227201
    0x000000D6AA554807LL, // log2(1.788235294117647) = 0.838536577305884
    0x000000D7797300CFLL, // log2(1.792156862745098) = 0.841696918199212
    0x000000D8481CD494LL, // log2(1.796078431372549) = 0.844850351238086
    0x000000D9165344C3LL, // log2(1.800000000000000) = 0.847996906554950
    0x000000D9E416D1ECLL, // log2(1.803921568627451) = 0.851136614085517
    0x000000DAB167FBCELL, // log2(1.807843137254902) = 0.854269503570480
    0x000000DB7E47414ELL, // log2(1.811764705882353) = 0.857395604557200
    0x000000DC4AB52083LL, // log2(1.815686274509804) = 0.860514946401378
    0x000000DD16B216B0LL, // log2(1.819607843137255) = 0.863627558268714
    0x000000DDE23EA04ALL, // log2(1.823529411764706) = 0.866733469136536
    0x000000DEAD5B38F8LL, // log2(1.827450980392157) = 0.869832707795422
    0x000000DF78085B98LL, // log2(1.831372549019608) = 0.872925302850804
    0x000000E04246823ALL, // log2(1.835294117647059) = 0.876011282724547
    0x000000E10C162629LL, // log2(1.839215686274510) = 0.879090675656519
    0x000000E1D577BFE9LL, // log2(1.843137254901961) = 0.882163509706142
    0x000000E29E6BC738LL, // log2(1.847058823529412) = 0.885229812753925
    0x000000E366F2B313LL, // log2(1.850980392156863) = 0.888289612502983
    0x000000E42F0CF9B4LL, // log2(1.854901960784314) = 0.891342936480537
    0x000000E4F6BB1095LL, // log2(1.858823529411765) = 0.894389812039401
    0x000000E5BDFD6C74LL, // log2(1.862745098039216) = 0.897430266359452
    0x000000E684D48150LL, // log2(1.866666666666667) = 0.900464326449086
    0x000000E74B40C26ELL, // log2(1.870588235294118) = 0.903492019146654
    0x000000E81142A25ALL, // log2(1.874509803921569) = 0.906513371121891
    0x000000E8D6DA92E9LL, // log2(1.878431372549020) = 0.909528408877322
    0x000000E99C090536LL, // log2(1.882352941176471) = 0.912537158749661
    0x000000EA60CE69ACLL, // log2(1.886274509803922) = 0.915539646911184
    0x000000EB252B3000LL, // log2(1.890196078431372) = 0.918535899371104
    0x000000EBE91FC734LL, // log2(1.894117647058823) = 0.921525941976915
    0x000000ECACAC9D9DLL, // log2(1.898039215686274) = 0.924509800415737
    0x000000ED6FD220DFLL, // log2(1.901960784313725) = 0.927487500215632
    0x000000EE3290BDF1LL, // log2(1.905882352941176) = 0.930459066746923
    0x000000EEF4E8E11ELL, // log2(1.909803921568628) = 0.933424525223484
    0x000000EFB6DAF606LL, // log2(1.913725490196079) = 0.936383900704028
    0x000000F0786767A0LL, // log2(1.917647058823529) = 0.939337218093376
    0x000000F1398EA03CLL, // log2(1.921568627450980) = 0.942284502143713
    0x000000F1FA510982LL, // log2(1.925490196078431) = 0.945225777455835
    0x000000F2BAAF0C76LL, // log2(1.929411764705882) = 0.948161068480382
    0x000000F37AA91179LL, // log2(1.933333333333333) = 0.951090399519054
    0x000000F43A3F8047LL, // log2(1.937254901960784) = 0.954013794725820
    0x000000F4F972BFFELL, // log2(1.941176470588235) = 0.956931278108114
    0x000000F5B8433719LL, // log2(1.945098039215686) = 0.959842873528017
    0x000000F676B14B78LL, // log2(1.949019607843137) = 0.962748604703428
    0x000000F734BD625ALL, // log2(1.952941176470588) = 0.965648495209223
    0x000000F7F267E066LL, // log2(1.956862745098039) = 0.968542568478403
    0x000000F8AFB129A3LL, // log2(1.960784313725490) = 0.971430847803229
    0x000000F96C99A185LL, // log2(1.964705882352941) = 0.974313356336351
    0x000000FA2921AAE2LL, // log2(1.968627450980392) = 0.977190117091914
    0x000000FAE549A7FCLL, // log2(1.972549019607843) = 0.980061152946669
    0x000000FBA111FA7ELL, // log2(1.976470588235294) = 0.982926486641059
    0x000000FC5C7B0380LL, // log2(1.980392156862745) = 0.985786140780299
    0x000000FD17852384LL, // log2(1.984313725490196) = 0.988640137835452
    0x000000FDD230BA7BLL, // log2(1.988235294117647) = 0.991488500144483
    0x000000FE8C7E27C4LL, // log2(1.992156862745098) = 0.994331249913308
    0x000000FF466DCA30LL, // log2(1.996078431372549) = 0.997168409216837
    0x0000010000000000LL  // log2(2.000000000000000) = 1.000000000000000
};

/*
 * Derivative Analysis for log2(x):
 * - First derivative: log2'(x) = 1/(x*ln(2))
 * - Second derivative: log2''(x) = -1/(x²*ln(2))
 *
 * Key characteristics:
 * 1. log2(x) is monotonically increasing, but its rate of change decreases as x increases
 * 2. The second derivative is negative and gradually approaches zero as x increases
 *
 * Interpolation strategy:
 * - For high precision requirements: Cubic Hermite interpolation provides excellent accuracy
 *   as it accounts for the curvature of log2(x) and maintains derivative continuity
 * - For performance-critical code: Linear interpolation may be sufficient, especially with
 *   a table size of 256 or larger, as log2(x) is well-behaved in the [1,2) range
 */

// Natural logarithm of 2 in Q23.40 format
inline constexpr int64_t kLn2 = 0x000000B17217F7D1LL;  // ln(2) ≈ 0.6931471805599453

// Fast lookup log2(x) with linear interpolation between table entries
// Input x is in fixed-point format with specified fraction bits
// Output is in Q23.40 fixed-point format representing log2(x)
// Precision: ~1.5e-6 absolute error
inline constexpr auto LookupLog2Fast(int64_t x, int input_fraction_bits) noexcept -> int64_t {
    // Constants
    constexpr int kOutputFractionBits = 40;  // Output format: Q23.40
    constexpr int64_t kOne = 1LL << kOutputFractionBits;

    // Convert input to internal format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            x <<= (kOutputFractionBits - input_fraction_bits);
        } else {
            x >>= (input_fraction_bits - kOutputFractionBits);
        }
    }

    // Handle special cases
    if (x <= 0) {
        // Log of zero or negative is undefined
        return INT64_MIN; // Return most negative value
    }

    // 1. Normalize x to [1,2) range using bit operations
    int64_t mantissa = x;
    int exponent = 0;

    // Efficient normalization using CountlZero
    const uint64_t u_mantissa = static_cast<uint64_t>(mantissa);
    const int msb = 63 - Primitives::CountlZero(u_mantissa);
    
    // Normalize to [1,2) range
    const int shift = msb - kOutputFractionBits;
    if (shift > 0) {
        mantissa >>= shift;
        exponent += shift;
    } else if (shift < 0) {
        mantissa <<= -shift;
        exponent += shift;
    }

    // 2. Calculate lookup table index and fractional part
    int64_t idx_scaled = ((mantissa - kOne) * 255) >> kOutputFractionBits;
    int idx = static_cast<int>(idx_scaled);
    int64_t t = ((mantissa - kOne) * 255) & ((1LL << kOutputFractionBits) - 1);

    // 3. Clamp index to valid range
    if (idx < 0) {
        idx = 0;
        t = 0;
    } else if (idx >= static_cast<int>(kLog2Lut.size()) - 1) {
        idx = static_cast<int>(kLog2Lut.size()) - 2;
        t = kOne - 1;  // Just under 1.0
    }

    // 4. Perform linear interpolation
    int64_t p0 = kLog2Lut[idx];
    int64_t p1 = kLog2Lut[idx + 1];
    int64_t interpolated_value = p0 + Primitives::Fixed64Mul(p1 - p0, t, kOutputFractionBits);

    // 5. Add exponent part
    int64_t result = interpolated_value + (static_cast<int64_t>(exponent) << kOutputFractionBits);

    // 6. Convert result back to original input format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            result >>= (kOutputFractionBits - input_fraction_bits);
        } else {
            result <<= (input_fraction_bits - kOutputFractionBits);
        }
    }

    return result;
}

// Lookup log2(x) with cubic Hermite interpolation for higher precision
// Input x is in fixed-point format with specified fraction bits
// Output is in Q23.40 fixed-point format representing log2(x)
// Precision: ~2.33e-10 absolute error (Q31.32 minimum precision)
inline constexpr auto LookupLog2(int64_t x, int input_fraction_bits) noexcept -> int64_t {
    // Constants
    constexpr int kOutputFractionBits = 40;  // Output format: Q23.40
    constexpr int64_t kOne = 1LL << kOutputFractionBits;

    // Convert input to internal format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            x <<= (kOutputFractionBits - input_fraction_bits);
        } else {
            x >>= (input_fraction_bits - kOutputFractionBits);
        }
    }

    // Handle special cases
    if (x <= 0) {
        // Log of zero or negative is undefined
        return INT64_MIN; // Return most negative value
    }

    // 1. Normalize x to [1,2) range using bit operations
    int64_t mantissa = x;
    int exponent = 0;

    // Efficient normalization using CountlZero or similar bit operation
    // Find the position of the most significant bit
    const uint64_t u_mantissa = static_cast<uint64_t>(mantissa);
    const int msb = 63 - Primitives::CountlZero(u_mantissa);
    
    // Normalize to [1,2) range
    const int shift = msb - kOutputFractionBits;
    if (shift > 0) {
        mantissa >>= shift;
        exponent += shift;
    } else if (shift < 0) {
        mantissa <<= -shift;
        exponent += shift;
    }

    // 2. Calculate lookup table index and fractional part
    int64_t idx_scaled = ((mantissa - kOne) * 255) >> kOutputFractionBits;
    int idx = static_cast<int>(idx_scaled);
    int64_t t = ((mantissa - kOne) * 255) & ((1LL << kOutputFractionBits) - 1);

    // 3. Clamp index to valid range
    if (idx < 0) {
        idx = 0;
        t = 0;
    } else if (idx >= static_cast<int>(kLog2Lut.size()) - 1) {
        idx = static_cast<int>(kLog2Lut.size()) - 2;
        t = kOne - 1;  // Just under 1.0
    }

    // 4. Get points from table
    int64_t p0 = kLog2Lut[idx];      // Point at left endpoint
    int64_t p1 = kLog2Lut[idx + 1];  // Point at right endpoint

    // 5. Compute derivatives using the properties of log2
    // log2'(x) = 1/(x*ln(2))
    int64_t x_at_idx = kOne + ((static_cast<int64_t>(idx) << kOutputFractionBits) / (kLog2Lut.size() - 1));
    int64_t x_at_next = kOne + ((static_cast<int64_t>(idx+1) << kOutputFractionBits) / (kLog2Lut.size() - 1));

    int64_t m0 = Primitives::Fixed64Div(kOne, Primitives::Fixed64Mul(x_at_idx, kLn2, kOutputFractionBits), kOutputFractionBits);
    int64_t m1 = Primitives::Fixed64Div(kOne, Primitives::Fixed64Mul(x_at_next, kLn2, kOutputFractionBits), kOutputFractionBits);

    // Scale derivatives by step size
    constexpr int64_t kStepSize = Primitives::Fixed64Div(kOne, static_cast<int64_t>(255) << kOutputFractionBits, kOutputFractionBits);
    m0 = Primitives::Fixed64Mul(m0, kStepSize, kOutputFractionBits);
    m1 = Primitives::Fixed64Mul(m1, kStepSize, kOutputFractionBits);

    // 6. Compute cubic Hermite coefficients
    int64_t p0_minus_p1 = p0 - p1;
    int64_t a = p0_minus_p1 * 2 + m0 + m1;
    int64_t b = -p0_minus_p1 * 3 - m0 * 2 - m1;
    int64_t c = m0;
    int64_t d = p0;

    // 7. Compute interpolation using Horner's method
    int64_t interpolated_value =
        d
        + Primitives::Fixed64Mul(
            t,
            c
                + Primitives::Fixed64Mul(
                    t, b + Primitives::Fixed64Mul(t, a, kOutputFractionBits), kOutputFractionBits),
            kOutputFractionBits);

    // 8. Add exponent part
    int64_t result = interpolated_value + (static_cast<int64_t>(exponent) << kOutputFractionBits);

    // 9. Convert result back to original input format if needed
    if (input_fraction_bits != kOutputFractionBits) {
        if (input_fraction_bits < kOutputFractionBits) {
            result >>= (kOutputFractionBits - input_fraction_bits);
        } else {
            result <<= (input_fraction_bits - kOutputFractionBits);
        }
    }

    return result;
}

}  // namespace math::fp::detail