# ------------------------------------------------------------------------------
#  Copyright (c) 2023-2024 Your Name
#  Distributed under the license of your choice
# ------------------------------------------------------------------------------

name: CMake Build & Test
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        compiler: [gcc, clang]
        standard: [14, 17, 20]
        include:
          # Define compiler settings for each environment
          - compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
          - compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          # MSVC for Windows
          - os: windows-latest
            compiler: msvc
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          # Remove MSVC duplicates and combinations that don't make sense
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          # MacOS typically uses Clang
          - os: macos-latest
            compiler: gcc

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Set up build environment (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Set up build environment (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          
      - name: Configure CMake
        run: >
          cmake -B ${{ github.workspace }}/build 
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_STANDARD=${{ matrix.standard }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure --verbose

  sanitizers:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined]
        
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Configure with ${{ matrix.sanitizer }} sanitizer
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"
          -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=${{ matrix.sanitizer }}"
          -S ${{ github.workspace }}
          
      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config Debug
        
      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest --build-config Debug --output-on-failure --verbose
        
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install clang-tidy
        run: sudo apt-get install -y clang-tidy
          
      - name: Configure with clang-tidy
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*,-fuchsia-*,-google-*,-llvm-header-guard,-cppcoreguidelines-owning-memory,-hicpp-no-array-decay,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-modernize-use-trailing-return-type,-readability-identifier-length"
          -S ${{ github.workspace }}
          
      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config Debug
        
      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest --build-config Debug --output-on-failure --verbose
